diff --git a/core/.eslintrc.json b/core/.eslintrc.json
index ed9d52781..1c67b146c 100644
--- a/core/.eslintrc.json
+++ b/core/.eslintrc.json
@@ -8,7 +8,6 @@
   "plugins": ["@typescript-eslint", "import"],
   "rules": {
     "quotes": ["warn", "double", {}],
-    "import/extensions": ["error", "ignorePackages"],
     "@typescript-eslint/naming-convention": "warn",
     "@typescript-eslint/semi": "warn",
     "curly": "warn",
diff --git a/core/config/promptFile.ts b/core/config/promptFile.ts
index ed6d2a648..2ab3373ec 100644
--- a/core/config/promptFile.ts
+++ b/core/config/promptFile.ts
@@ -2,10 +2,10 @@ import Handlebars from "handlebars";
 import path from "path";
 import * as YAML from "yaml";
 import type { IDE, SlashCommand } from "..";
-import { walkDir } from "../indexing/walkDir.js";
-import { stripImages } from "../llm/images.js";
-import { renderTemplatedString } from "../llm/llms/index.js";
-import { getBasename } from "../util/index.js";
+import { walkDir } from "../indexing/walkDir";
+import { stripImages } from "../llm/images";
+import { renderTemplatedString } from "../llm/llms/index";
+import { getBasename } from "../util/index";
 
 export const DEFAULT_PROMPTS_FOLDER = ".prompts";
 
diff --git a/core/core.ts b/core/core.ts
index c7537a480..a8c57b4fc 100644
--- a/core/core.ts
+++ b/core/core.ts
@@ -1,38 +1,36 @@
 import { v4 as uuidv4 } from "uuid";
 import type {
   ContextItemId,
-  EmbeddingsProvider,
   IDE,
   IndexingProgressUpdate,
-  SiteIndexingConfig,
 } from ".";
-import { CompletionProvider } from "./autocomplete/completionProvider.js";
-import { ConfigHandler } from "./config/ConfigHandler.js";
+import { CompletionProvider } from "./autocomplete/completionProvider";
+import { ConfigHandler } from "./config/ConfigHandler";
 import {
   setupApiKeysMode,
   setupFreeTrialMode,
   setupLocalAfterFreeTrial,
   setupLocalMode,
-} from "./config/onboarding.js";
-import { createNewPromptFile } from "./config/promptFile.js";
-import { addModel, addOpenAIKey, deleteModel } from "./config/util.js";
-import { recentlyEditedFilesCache } from "./context/retrieval/recentlyEditedFilesCache.js";
-import { ContinueServerClient } from "./continueServer/stubs/client.js";
-import { getAuthUrlForTokenPage } from "./control-plane/auth/index.js";
+} from "./config/onboarding";
+import { createNewPromptFile } from "./config/promptFile";
+import { addModel, addOpenAIKey, deleteModel } from "./config/util";
+import { recentlyEditedFilesCache } from "./context/retrieval/recentlyEditedFilesCache";
+import { ContinueServerClient } from "./continueServer/stubs/client";
+import { getAuthUrlForTokenPage } from "./control-plane/auth/index";
 import { ControlPlaneClient } from "./control-plane/client";
-import { CodebaseIndexer, PauseToken } from "./indexing/CodebaseIndexer.js";
-import DocsService from "./indexing/docs/DocsService.js";
-import Ollama from "./llm/llms/Ollama.js";
+import { CodebaseIndexer, PauseToken } from "./indexing/CodebaseIndexer";
+import DocsService from "./indexing/docs/DocsService";
+import Ollama from "./llm/llms/Ollama";
 import type { FromCoreProtocol, ToCoreProtocol } from "./protocol";
-import { GlobalContext } from "./util/GlobalContext.js";
-import { logDevData } from "./util/devdata.js";
-import { DevDataSqliteDb } from "./util/devdataSqlite.js";
-import { fetchwithRequestOptions } from "./util/fetchWithOptions.js";
-import historyManager from "./util/history.js";
+import { GlobalContext } from "./util/GlobalContext";
+import { logDevData } from "./util/devdata";
+import { DevDataSqliteDb } from "./util/devdataSqlite";
+import { fetchwithRequestOptions } from "./util/fetchWithOptions";
+import historyManager from "./util/history";
 import type { IMessenger, Message } from "./util/messenger";
-import { editConfigJson } from "./util/paths.js";
-import { Telemetry } from "./util/posthog.js";
-import { streamDiffLines } from "./util/verticalEdit.js";
+import { editConfigJson } from "./util/paths";
+import { Telemetry } from "./util/posthog";
+import { streamDiffLines } from "./util/verticalEdit";
 
 export class Core {
   // implements IMessenger<ToCoreProtocol, FromCoreProtocol>
diff --git a/core/index.d.ts b/core/index.d.ts
index f6260dd61..2b5236652 100644
--- a/core/index.d.ts
+++ b/core/index.d.ts
@@ -342,7 +342,7 @@ export interface LLMOptions {
   // GCP Options
   region?: string;
   projectId?: string;
-  capabilities?: ModelCapability
+  capabilities?: ModelCapability;
 }
 type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<
   T,
@@ -738,7 +738,7 @@ export interface ModelDescription {
   systemMessage?: string;
   requestOptions?: RequestOptions;
   promptTemplates?: { [key: string]: string };
-  capabilities?: ModelCapability
+  capabilities?: ModelCapability;
 }
 
 export type EmbeddingsProviderName =
diff --git a/core/indexing/docs/DocsService.ts b/core/indexing/docs/DocsService.ts
index 844cbef39..4bad0f8ce 100644
--- a/core/indexing/docs/DocsService.ts
+++ b/core/indexing/docs/DocsService.ts
@@ -333,6 +333,8 @@ export default class DocsService {
       return DocsService.preIndexedDocsEmbeddingsProvider;
     }
 
+    // console.log("Using Embeddings Provider: ", this.config.embeddingsProvider);
+
     return this.config.embeddingsProvider;
   }
 
@@ -346,6 +348,13 @@ export default class DocsService {
     return favicon;
   }
 
+  /**
+   * A ConfigHandler is passed to the DocsService in `core` when
+   * we don't yet have access to the config object. This handler
+   * is used to set up a single instance of the DocsService that
+   * subscribes to config updates, e.g. to trigger re-indexing
+   * on a new embeddings provider.
+   */
   private async init(configOrHandler: ContinueConfig | ConfigHandler) {
     if (configOrHandler instanceof ConfigHandler) {
       this.config = await configOrHandler.loadConfig();
@@ -356,7 +365,9 @@ export default class DocsService {
     const embeddingsProvider = await this.getEmbeddingsProvider();
     const [mockVector] = await embeddingsProvider.embed(["mockVector"]);
 
-    const lance = await this.getOrCreateLanceTable(mockVector);
+    const lance = await this.getOrCreateLanceTable({
+      initializationVector: mockVector,
+    });
     const sqlite = await this.getOrCreateSqliteDb();
 
     await runLanceMigrations(lance);
@@ -490,7 +501,7 @@ export default class DocsService {
     initializationVector,
     isPreIndexedDoc,
   }: {
-    initializationVector?: number[];
+    initializationVector: number[];
     isPreIndexedDoc?: boolean;
   }) {
     const conn = await lancedb.connect(getLanceDbPath());
@@ -547,6 +558,8 @@ export default class DocsService {
       initializationVector: sampleVector,
     });
 
+    console.log({ embeddings0Length: embeddings[0].length, chunk0: chunks[0] });
+
     const rows: LanceDbDocsRow[] = chunks.map((chunk, i) => ({
       vector: embeddings[i],
       starturl: siteIndexingConfig.startUrl,
@@ -580,6 +593,8 @@ export default class DocsService {
       (doc) => doc.startUrl === siteIndexingConfig.startUrl,
     );
 
+    console.log({ siteIndexingConfig, doesDocExist });
+
     if (!doesDocExist) {
       editConfigJson((config) => ({
         ...config,
diff --git a/core/indexing/docs/migrations.ts b/core/indexing/docs/migrations.ts
index 0437482cf..f617098af 100644
--- a/core/indexing/docs/migrations.ts
+++ b/core/indexing/docs/migrations.ts
@@ -11,7 +11,7 @@ export async function runLanceMigrations(table: Table) {
         try {
           const schema = await table.schema;
 
-          if (schema.fields.some((field) => field.name === "baseurl")) {
+          if (schema.fields.some((field: any) => field.name === "baseurl")) {
             await table.alterColumns([{ path: "baseurl", rename: "starturl" }]);
           }
         } finally {
diff --git a/core/indexing/embeddings/TransformersJsEmbeddingsProvider.ts b/core/indexing/embeddings/TransformersJsEmbeddingsProvider.ts
index c7b99dbab..bcaad9480 100644
--- a/core/indexing/embeddings/TransformersJsEmbeddingsProvider.ts
+++ b/core/indexing/embeddings/TransformersJsEmbeddingsProvider.ts
@@ -41,6 +41,9 @@ export class TransformersJsEmbeddingsProvider extends BaseEmbeddingsProvider {
   static providerName: EmbeddingsProviderName = "transformers.js";
   static maxGroupSize: number = 4;
   static model: string = "all-MiniLM-L6-v2";
+  static mockVector: number[][] = [
+    Array.from({ length: 384 }).fill(1),
+  ] as number[][];
 
   constructor() {
     super({ model: TransformersJsEmbeddingsProvider.model }, () =>
@@ -49,6 +52,11 @@ export class TransformersJsEmbeddingsProvider extends BaseEmbeddingsProvider {
   }
 
   async embed(chunks: string[]) {
+    // Workaround to ignore testing issues in Jest
+    if (process.env.NODE_ENV === "test") {
+      return TransformersJsEmbeddingsProvider.mockVector;
+    }
+
     const extractor = await EmbeddingsPipeline.getInstance();
 
     if (!extractor) {
diff --git a/core/jest.config.js b/core/jest.config.js
index 8afadbd3d..1e20c0507 100644
--- a/core/jest.config.js
+++ b/core/jest.config.js
@@ -3,10 +3,11 @@ import { fileURLToPath } from "url";
 
 export default {
   transform: {
-    "^.+\\.(ts|js)$": ["ts-jest", { useESM: true, isolatedModules: true }],
+    "^.+\\.(ts|js)$": ["ts-jest", { useESM: true, useIsolatedModules: true }],
   },
   moduleNameMapper: {
     "^(\\.{1,2}/.*)\\.js$": "$1",
+    "^uuid$": "uuid", // https://stackoverflow.com/a/73626360
   },
   extensionsToTreatAsEsm: [".ts"],
   preset: "ts-jest/presets/default-esm",
@@ -17,4 +18,5 @@ export default {
     __filename: path.resolve(fileURLToPath(import.meta.url)),
   },
   globalSetup: "<rootDir>/jest.global-setup.ts",
+  setupFilesAfterEnv: ["<rootDir>/jest.setup.ts"],
 };
diff --git a/core/jest.global-setup.ts b/core/jest.global-setup.ts
index 1c4fe12e8..ee9cddde4 100644
--- a/core/jest.global-setup.ts
+++ b/core/jest.global-setup.ts
@@ -1,4 +1,3 @@
-// jest.global-setup.js
 import path from "path";
 
 export default async function () {
diff --git a/core/jest.setup.ts b/core/jest.setup.ts
new file mode 100644
index 000000000..7e68e4b6c
--- /dev/null
+++ b/core/jest.setup.ts
@@ -0,0 +1,11 @@
+// https://github.com/mswjs/msw/issues/1576#issuecomment-1482643055
+import { TextEncoder, TextDecoder } from "util";
+import fetch, { Request, Response } from "node-fetch";
+
+const globalThis = global as any;
+
+globalThis.fetch = fetch;
+globalThis.Request = Request;
+globalThis.Response = Response;
+globalThis.TextEncoder = TextEncoder;
+globalThis.TextDecoder = TextDecoder;
diff --git a/core/package-lock.json b/core/package-lock.json
index 1d2608e7e..575ebc2a0 100644
--- a/core/package-lock.json
+++ b/core/package-lock.json
@@ -65,21 +65,21 @@
         "@biomejs/biome": "1.6.4",
         "@google/generative-ai": "^0.11.4",
         "@types/follow-redirects": "^1.14.4",
+        "@types/isomorphic-fetch": "^0.0.39",
         "@types/jest": "^29.5.12",
         "@types/jquery": "^3.5.29",
         "@types/jsdom": "^21.1.6",
         "@types/mozilla-readability": "^0.2.1",
         "@types/mustache": "^4.2.5",
-        "@types/pg": "^8.11.6",
-        "@types/request": "^2.48.12",
         "@types/node-fetch": "^2.6.11",
+        "@types/pg": "^8.11.6",
         "@types/request": "^2.48.12",
         "@types/uuid": "^9.0.7",
-        "babel-plugin-transform-import-meta": "^2.2.1",
         "@types/win-ca": "^3.5.4",
         "esbuild": "0.17.19",
         "eslint": "^8",
         "eslint-plugin-import": "^2.29.1",
+        "isomorphic-fetch": "^3.0.0",
         "jest": "^29.7.0",
         "jest-environment-jsdom": "^29.7.0",
         "myers-diff": "^2.1.0",
@@ -4362,6 +4362,12 @@
         "@types/node": "*"
       }
     },
+    "node_modules/@types/isomorphic-fetch": {
+      "version": "0.0.39",
+      "resolved": "https://registry.npmjs.org/@types/isomorphic-fetch/-/isomorphic-fetch-0.0.39.tgz",
+      "integrity": "sha512-I0gou/ZdA1vMG7t7gMzL7VYu2xAKU78rW9U1l10MI0nn77pEHq3tQqHQ8hMmXdMpBlkxZOorjI4sO594Z3kKJw==",
+      "dev": true
+    },
     "node_modules/@types/istanbul-lib-coverage": {
       "version": "2.0.6",
       "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
@@ -4467,32 +4473,6 @@
       "integrity": "sha512-Xd22WCRBydkGSApl5Bw0PhAOHKSVjNL3E3AwzKaps96IMraPqy5BvZIsBVK6JLwdybUzjHnuWVwpDd0JjTfHXA==",
       "peer": true
     },
-    "node_modules/@types/request": {
-      "version": "2.48.12",
-      "resolved": "https://registry.npmjs.org/@types/request/-/request-2.48.12.tgz",
-      "integrity": "sha512-G3sY+NpsA9jnwm0ixhAFQSJ3Q9JkpLZpJbI3GMv0mIAT0y3mRabYeINzal5WOChIiaTEGQYlHOKgkaM9EisWHw==",
-      "dev": true,
-      "dependencies": {
-        "@types/caseless": "*",
-        "@types/node": "*",
-        "@types/tough-cookie": "*",
-        "form-data": "^2.5.0"
-      }
-    },
-    "node_modules/@types/request/node_modules/form-data": {
-      "version": "2.5.1",
-      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.5.1.tgz",
-      "integrity": "sha512-m21N3WOmEEURgk6B9GLOE4RuWOFf28Lhh9qGYeNlGq4VDXUlJy2th2slBNU8Gp8EzloYZOibZJ7t5ecIrFSjVA==",
-      "dev": true,
-      "dependencies": {
-        "asynckit": "^0.4.0",
-        "combined-stream": "^1.0.6",
-        "mime-types": "^2.1.12"
-      },
-      "engines": {
-        "node": ">= 0.12"
-      }
-    },
     "node_modules/@types/pg": {
       "version": "8.11.6",
       "resolved": "https://registry.npmjs.org/@types/pg/-/pg-8.11.6.tgz",
@@ -5407,19 +5387,6 @@
         "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
       }
     },
-    "node_modules/babel-plugin-transform-import-meta": {
-      "version": "2.2.1",
-      "resolved": "https://registry.npmjs.org/babel-plugin-transform-import-meta/-/babel-plugin-transform-import-meta-2.2.1.tgz",
-      "integrity": "sha512-AxNh27Pcg8Kt112RGa3Vod2QS2YXKKJ6+nSvRtv7qQTJAdx0MZa4UHZ4lnxHUWA2MNbLuZQv5FVab4P1CoLOWw==",
-      "dev": true,
-      "dependencies": {
-        "@babel/template": "^7.4.4",
-        "tslib": "^2.4.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.10.0"
-      }
-    },
     "node_modules/babel-preset-current-node-syntax": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.0.1.tgz",
@@ -8612,6 +8579,58 @@
       "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
       "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw=="
     },
+    "node_modules/isomorphic-fetch": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/isomorphic-fetch/-/isomorphic-fetch-3.0.0.tgz",
+      "integrity": "sha512-qvUtwJ3j6qwsF3jLxkZ72qCgjMysPzDfeV240JHiGZsANBYd+EEuu35v7dfrJ9Up0Ak07D7GGSkGhCHTqg/5wA==",
+      "dev": true,
+      "dependencies": {
+        "node-fetch": "^2.6.1",
+        "whatwg-fetch": "^3.4.1"
+      }
+    },
+    "node_modules/isomorphic-fetch/node_modules/node-fetch": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
+      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
+      "dev": true,
+      "dependencies": {
+        "whatwg-url": "^5.0.0"
+      },
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      },
+      "peerDependencies": {
+        "encoding": "^0.1.0"
+      },
+      "peerDependenciesMeta": {
+        "encoding": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/isomorphic-fetch/node_modules/tr46": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
+      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
+      "dev": true
+    },
+    "node_modules/isomorphic-fetch/node_modules/webidl-conversions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
+      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
+      "dev": true
+    },
+    "node_modules/isomorphic-fetch/node_modules/whatwg-url": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
+      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
+      "dev": true,
+      "dependencies": {
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
+      }
+    },
     "node_modules/isstream": {
       "version": "0.1.2",
       "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
diff --git a/core/package.json b/core/package.json
index 0fd46a2be..f47e11054 100644
--- a/core/package.json
+++ b/core/package.json
@@ -16,14 +16,14 @@
     "@biomejs/biome": "1.6.4",
     "@google/generative-ai": "^0.11.4",
     "@types/follow-redirects": "^1.14.4",
+    "@types/isomorphic-fetch": "^0.0.39",
     "@types/jest": "^29.5.12",
     "@types/jquery": "^3.5.29",
     "@types/jsdom": "^21.1.6",
     "@types/mozilla-readability": "^0.2.1",
     "@types/mustache": "^4.2.5",
-    "@types/pg": "^8.11.6",
-    "@types/request": "^2.48.12",
     "@types/node-fetch": "^2.6.11",
+    "@types/pg": "^8.11.6",
     "@types/request": "^2.48.12",
     "@types/uuid": "^9.0.7",
     "@types/win-ca": "^3.5.4",
diff --git a/core/test/indexing/DocsService.test.ts b/core/test/indexing/DocsService.test.ts
index 60abea888..ea419c0c5 100644
--- a/core/test/indexing/DocsService.test.ts
+++ b/core/test/indexing/DocsService.test.ts
@@ -1,102 +1,176 @@
 /**
  * @jest-environment jsdom
  */
-
-import { TextEncoder, TextDecoder } from "util";
-(global as any).TextEncoder = TextEncoder;
-(global as any).TextDecoder = TextDecoder;
-
-import * as fs from "fs";
 import FileSystemIde from "../../util/filesystem.js";
 import { ContinueConfig } from "../../index.js";
 import DocsService from "../../indexing/docs/DocsService.js";
-import { getConfigJsonPath } from "../../util/paths.js";
-
-// Mock dependencies
-// jest.mocked("../../util/getMetaUrl.ts");
+import { editConfigJson, getConfigJsonPath } from "../../util/paths.js";
+import { ConfigHandler } from "../../config/ConfigHandler.js";
+import { ControlPlaneClient } from "../../control-plane/client.js";
+import * as path from "path";
+import * as fs from "fs";
+import { GlobalContext } from "../../util/GlobalContext.js";
+import TransformersJsEmbeddingsProvider from "../../indexing/embeddings/TransformersJsEmbeddingsProvider.js";
 
 describe("DocsService Integration Tests", () => {
   let ide: FileSystemIde;
   let config: ContinueConfig;
-  let docsService: DocsService;
+  let configHandler: ConfigHandler;
+
+  const siteConfig = {
+    startUrl: "https://github.com/continuedev/amplified.dev",
+    title: "Amplified Dev",
+  };
 
-  beforeAll(() => {
+  beforeAll(async () => {
     ide = new FileSystemIde(process.cwd());
-    config = JSON.parse(fs.readFileSync(getConfigJsonPath(), "utf8"));
-  });
 
-  beforeEach(() => {
-    docsService = new DocsService(config, ide);
-  });
+    configHandler = new ConfigHandler(
+      ide,
+      Promise.resolve({
+        remoteConfigSyncPeriod: 60,
+        userToken: "",
+        enableControlServerBeta: false,
+        pauseCodebaseIndexOnStart: false,
+        ideSettings: {} as any,
+        enableDebugLogs: false,
+        remoteConfigServerUrl: "",
+      }),
+      async () => {},
+      new ControlPlaneClient(
+        Promise.resolve({
+          accessToken: "",
+          account: {
+            id: "",
+            label: "",
+          },
+        }),
+      ),
+    );
 
-  test.only("Indexing and retrieval of a new documentation site", async () => {
-    const siteConfig = {
-      startUrl: "https://github.com/continuedev/amplified.dev",
-      title: "Amplified Dev",
-    };
+    config = await configHandler.loadConfig();
+  });
 
-    const indexGenerator = docsService.indexAndAdd(siteConfig);
+  // beforeEach(() => {
+  //   editConfigJson((config) => ({
+  //     ...config,
+  //     embeddingsProvider: { provider: "free-trial" },
+  //   }));
+  // });
 
-    for await (const update of indexGenerator) {
-      expect(update.status).toMatch(/indexing|done/);
+  afterEach(() => {
+    const configFolder = path.dirname(getConfigJsonPath());
+    if (fs.existsSync(configFolder)) {
+      fs.rmSync(configFolder, { recursive: true, force: true });
     }
+  });
+
+  test.only("Indexing, retrieval, and deletion of a new documentation site", async () => {
+    const docsService = new DocsService(config, ide);
 
+    const generator = docsService.indexAndAdd(siteConfig);
+    while (!(await generator.next()).done) {}
+
+    // Sqlite check
     expect(await docsService.has(siteConfig.startUrl)).toBe(true);
 
-    const mockVector = [0.1, 0.2, 0.3];
-    const retrievedChunks = await docsService.retrieveEmbeddings(
+    // config.json check
+    let updatedConfig = await configHandler.loadConfig();
+    console.log(updatedConfig);
+    expect(updatedConfig.docs).toContainEqual(siteConfig);
+
+    // Lance DB check
+    let retrievedChunks = await docsService.retrieveEmbeddings(
       siteConfig.startUrl,
-      mockVector,
+      TransformersJsEmbeddingsProvider.mockVector[0],
       5,
     );
 
-    expect(retrievedChunks.length).toBeGreaterThan(0);
-    expect(retrievedChunks[0].otherMetadata?.title).toBe(siteConfig.title);
+    // expect(retrievedChunks.length).toBeGreaterThan(0);
+
+    await docsService.delete(siteConfig.startUrl);
+
+    // Sqlite check
+    expect(await docsService.has(siteConfig.startUrl)).toBe(false);
+
+    // config.json check
+    updatedConfig = await configHandler.loadConfig();
+    console.log(updatedConfig);
+    expect(updatedConfig.docs).not.toContainEqual(
+      expect.objectContaining(siteConfig),
+    );
+
+    // LanceDB check
+    retrievedChunks = await docsService.retrieveEmbeddings(
+      siteConfig.startUrl,
+      TransformersJsEmbeddingsProvider.mockVector[0],
+      5,
+    );
+    expect(retrievedChunks.length).toBe(0);
   });
 
-  // test("2. Deleting a documentation site", async () => {
-  //   const siteConfig = {
-  //     startUrl: "https://example.com",
-  //     title: "Example Docs",
-  //   };
-  //   await docsService.indexAndAdd(siteConfig).next();
+  test("Reindexing when changing the embeddings provider", async () => {
+    const docsService = new DocsService(configHandler, ide);
 
-  //   await docsService.delete(siteConfig.startUrl);
+    const originalEmbeddingsProvider =
+      await docsService.getEmbeddingsProvider();
+    const originalEmbeddingsProviderId = originalEmbeddingsProvider.id;
+    const [originalVector] = await originalEmbeddingsProvider.embed([
+      "What is an amplified dev?",
+    ]);
 
-  //   expect(await docsService.has(siteConfig.startUrl)).toBe(false);
-  //   expect(config.docs).not.toContainEqual(expect.objectContaining(siteConfig));
-  // });
+    const newEmbeddingsProvider = DocsService.preIndexedDocsEmbeddingsProvider;
 
-  // test("3. Reindexing when changing the embeddings provider", async () => {
-  //   const siteConfigs = [
-  //     { startUrl: "https://example1.com", title: "Example Docs 1" },
-  //     { startUrl: "https://example2.com", title: "Example Docs 2" },
-  //   ];
+    const generator = docsService.indexAndAdd(siteConfig);
+    while (!(await generator.next()).done) {}
 
-  //   for (const siteConfig of siteConfigs) {
-  //     await docsService.indexAndAdd(siteConfig).next();
-  //   }
+    let retrievedChunks = await docsService.retrieveEmbeddings(
+      siteConfig.startUrl,
+      originalVector,
+      5,
+    );
 
-  //   // Change embeddings provider
-  //   const newConfig = {
-  //     ...config,
-  //     embeddingsProvider: {
-  //       id: "new-provider",
-  //       type: "openai",
-  //     } as EmbeddingsProvider,
-  //   };
-  //   docsService = new DocsService(newConfig, mockIde, mockMessenger);
-
-  //   // Verify reindexing
-  //   for (const siteConfig of siteConfigs) {
-  //     const retrievedChunks = await docsService.retrieveEmbeddings(
-  //       siteConfig.startUrl,
-  //       [0.1, 0.2, 0.3],
-  //       5,
-  //     );
-  //     expect(retrievedChunks.length).toBeGreaterThan(0);
-  //   }
-  // });
+    // Confirm we can get chunks using the original embeddings provider
+    expect(retrievedChunks.length).toBeGreaterThan(0);
+
+    // Change embeddings provider
+    editConfigJson((config) => ({
+      ...config,
+      embeddingsProvider: {
+        provider: newEmbeddingsProvider.providerName,
+      },
+    }));
+
+    const globalContext = new GlobalContext();
+
+    const startTime = Date.now();
+    const maxWaitTime = 20000; // 20 seconds in milliseconds
+
+    while (
+      globalContext.get("curEmbeddingsProviderId") !== newEmbeddingsProvider.id
+    ) {
+      if (Date.now() - startTime > maxWaitTime) {
+        throw new Error(
+          `Timeout: embeddingsProvider.provider did not become '${newEmbeddingsProvider.id}' within 20 seconds`,
+        );
+      }
+      await new Promise((resolve) => setTimeout(resolve, 100)); // Wait 100ms before checking again
+    }
+
+    // Verify reindexing
+    const [newMockVector] = await newEmbeddingsProvider.embed([
+      "What is an amplified dev?",
+    ]);
+
+    retrievedChunks = await docsService.retrieveEmbeddings(
+      siteConfig.startUrl,
+      newMockVector,
+      5,
+    );
+
+    expect(retrievedChunks.length).toBeGreaterThan(0);
+    expect(originalEmbeddingsProviderId).not.toEqual(newEmbeddingsProvider.id);
+  });
 
   // test("4. Handling of pre-indexed documentation", async () => {
   //   const preIndexedUrl = "https://preindexed.com";
diff --git a/core/tsconfig.json b/core/tsconfig.json
index fdb4b3b86..69966e2de 100644
--- a/core/tsconfig.json
+++ b/core/tsconfig.json
@@ -9,8 +9,8 @@
     "allowSyntheticDefaultImports": true,
     "strict": true,
     "forceConsistentCasingInFileNames": true,
-    "module": "NodeNext",
-    "moduleResolution": "NodeNext",
+    "module": "ESNext",
+    "moduleResolution": "Bundler",
     "resolveJsonModule": true,
     "isolatedModules": true,
     "noEmit": true,
diff --git a/docs/static/schemas/config.json b/docs/static/schemas/config.json
index 0fab5a70d..74b48030b 100644
--- a/docs/static/schemas/config.json
+++ b/docs/static/schemas/config.json
@@ -1819,6 +1819,10 @@
               "maxDepth": {
                 "type": "integer",
                 "description": "The maximum depth to crawl the documentation site"
+              },
+              "favicon": {
+                "type": "string",
+                "description": "The URL path to a favicon for the site - by default, it will be `/favicon.ico` path from the Start URL"
               }
             },
             "required": ["title", "startUrl"]
diff --git a/extensions/intellij/src/main/resources/config_schema.json b/extensions/intellij/src/main/resources/config_schema.json
index 0fab5a70d..74b48030b 100644
--- a/extensions/intellij/src/main/resources/config_schema.json
+++ b/extensions/intellij/src/main/resources/config_schema.json
@@ -1819,6 +1819,10 @@
               "maxDepth": {
                 "type": "integer",
                 "description": "The maximum depth to crawl the documentation site"
+              },
+              "favicon": {
+                "type": "string",
+                "description": "The URL path to a favicon for the site - by default, it will be `/favicon.ico` path from the Start URL"
               }
             },
             "required": ["title", "startUrl"]
diff --git a/extensions/vscode/continue_rc_schema.json b/extensions/vscode/continue_rc_schema.json
index 098d47fda..9d76fbd57 100644
--- a/extensions/vscode/continue_rc_schema.json
+++ b/extensions/vscode/continue_rc_schema.json
@@ -2032,6 +2032,10 @@
               "maxDepth": {
                 "type": "integer",
                 "description": "The maximum depth to crawl the documentation site"
+              },
+              "favicon": {
+                "type": "string",
+                "description": "The URL path to a favicon for the site - by default, it will be `/favicon.ico` path from the Start URL"
               }
             },
             "required": [
diff --git a/extensions/vscode/package-lock.json b/extensions/vscode/package-lock.json
index a2ee173a8..6eefef854 100644
--- a/extensions/vscode/package-lock.json
+++ b/extensions/vscode/package-lock.json
@@ -101,9 +101,6 @@
         "@continuedev/llm-info": "^1.0.1",
         "@mozilla/readability": "^0.5.0",
         "@octokit/rest": "^20.0.2",
-        "@types/jsdom": "^21.1.6",
-        "@types/mozilla-readability": "^0.2.1",
-        "@types/node-fetch": "^2.6.11",
         "@typescript-eslint/eslint-plugin": "^7.8.0",
         "@typescript-eslint/parser": "^7.8.0",
         "@xenova/transformers": "2.14.0",
@@ -154,9 +151,13 @@
         "@biomejs/biome": "1.6.4",
         "@google/generative-ai": "^0.11.4",
         "@types/follow-redirects": "^1.14.4",
+        "@types/isomorphic-fetch": "^0.0.39",
         "@types/jest": "^29.5.12",
         "@types/jquery": "^3.5.29",
+        "@types/jsdom": "^21.1.6",
+        "@types/mozilla-readability": "^0.2.1",
         "@types/mustache": "^4.2.5",
+        "@types/node-fetch": "^2.6.11",
         "@types/pg": "^8.11.6",
         "@types/request": "^2.48.12",
         "@types/uuid": "^9.0.7",
@@ -165,6 +166,7 @@
         "eslint": "^8",
         "eslint-plugin-import": "^2.29.1",
         "jest": "^29.7.0",
+        "jest-environment-jsdom": "^29.7.0",
         "myers-diff": "^2.1.0",
         "onnxruntime-common": "1.14.0",
         "onnxruntime-web": "1.14.0",
diff --git a/gui/package-lock.json b/gui/package-lock.json
index 866d55389..e92ef530e 100644
--- a/gui/package-lock.json
+++ b/gui/package-lock.json
@@ -94,9 +94,6 @@
         "@continuedev/llm-info": "^1.0.1",
         "@mozilla/readability": "^0.5.0",
         "@octokit/rest": "^20.0.2",
-        "@types/jsdom": "^21.1.6",
-        "@types/mozilla-readability": "^0.2.1",
-        "@types/node-fetch": "^2.6.11",
         "@typescript-eslint/eslint-plugin": "^7.8.0",
         "@typescript-eslint/parser": "^7.8.0",
         "@xenova/transformers": "2.14.0",
@@ -147,9 +144,13 @@
         "@biomejs/biome": "1.6.4",
         "@google/generative-ai": "^0.11.4",
         "@types/follow-redirects": "^1.14.4",
+        "@types/isomorphic-fetch": "^0.0.39",
         "@types/jest": "^29.5.12",
         "@types/jquery": "^3.5.29",
+        "@types/jsdom": "^21.1.6",
+        "@types/mozilla-readability": "^0.2.1",
         "@types/mustache": "^4.2.5",
+        "@types/node-fetch": "^2.6.11",
         "@types/pg": "^8.11.6",
         "@types/request": "^2.48.12",
         "@types/uuid": "^9.0.7",
@@ -158,6 +159,7 @@
         "eslint": "^8",
         "eslint-plugin-import": "^2.29.1",
         "jest": "^29.7.0",
+        "jest-environment-jsdom": "^29.7.0",
         "myers-diff": "^2.1.0",
         "onnxruntime-common": "1.14.0",
         "onnxruntime-web": "1.14.0",
@@ -5153,6 +5155,7 @@
     },
     "../core/node_modules/@types/jsdom": {
       "version": "21.1.6",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@types/node": "*",
@@ -5170,6 +5173,7 @@
     },
     "../core/node_modules/@types/mozilla-readability": {
       "version": "0.2.1",
+      "dev": true,
       "license": "MIT"
     },
     "../core/node_modules/@types/mustache": {
@@ -5206,6 +5210,7 @@
     },
     "../core/node_modules/@types/tough-cookie": {
       "version": "4.0.5",
+      "dev": true,
       "license": "MIT"
     },
     "../core/node_modules/@types/uuid": {
