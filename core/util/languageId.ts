/** Ids of all known languages. The associated string is lower-hyphen, to be used as key in the configuration and for file and folder names */
export enum LanguageId {
  Typescript = "typescript",
  Python = "python",
  Java = "java",
  Cpp = "cpp",
  CSharp = "c_sharp",
  C = "c",
  Scala = "scala",
  Go = "go",
  Rust = "rust",
  Haskell = "haskell",
  PHP = "php",
  RubyOnRails = "ruby_on_rails",
  Swift = "swift",
  Kotlin = "kotlin",
  Ruby = "ruby",
  Clojure = "clojure",
  Julia = "julia",
  FSharp = "fsharp",
  R = "r",
  Dart = "dart",
  Solidity = "solidity",
  YAML = "yaml",
  Json = "json",
  Markdown = "markdown",
  Bash = "bash",
  Tsx = "tsx",
  Elm = "elm",
  Javascript = "javascript",
  Elisp = "elisp",
  Elixir = "elixir",
  EmbeddedTemplate = "embedded_template",
  Html = "html",
  Lua = "lua",
  Ocaml = "ocaml",
  Ql = "ql",
  Rescript = "rescript",
  Systemrdl = "systemrdl",
  Toml = "toml",
  CSS = "css",
}

const languageByExtension: { [extension: string]: LanguageId } = {
  ts: LanguageId.Typescript,
  js: LanguageId.Typescript,
  tsx: LanguageId.Tsx,
  json: LanguageId.Json,
  jsx: LanguageId.Typescript,
  ipynb: LanguageId.Python,
  py: LanguageId.Python,
  pyi: LanguageId.Python,
  java: LanguageId.Java,
  cpp: LanguageId.Cpp,
  cxx: LanguageId.Cpp,
  h: LanguageId.Cpp,
  hpp: LanguageId.Cpp,
  cs: LanguageId.CSharp,
  c: LanguageId.C,
  scala: LanguageId.Scala,
  sc: LanguageId.Scala,
  go: LanguageId.Go,
  rs: LanguageId.Rust,
  hs: LanguageId.Haskell,
  php: LanguageId.PHP,
  rb: LanguageId.Ruby,
  rails: LanguageId.RubyOnRails,
  swift: LanguageId.Swift,
  kt: LanguageId.Kotlin,
  clj: LanguageId.Clojure,
  cljs: LanguageId.Clojure,
  cljc: LanguageId.Clojure,
  jl: LanguageId.Julia,
  fs: LanguageId.FSharp,
  fsi: LanguageId.FSharp,
  fsx: LanguageId.FSharp,
  fsscript: LanguageId.FSharp,
  r: LanguageId.R,
  R: LanguageId.R,
  dart: LanguageId.Dart,
  sol: LanguageId.Solidity,
  yaml: LanguageId.YAML,
  yml: LanguageId.YAML,
  md: LanguageId.Markdown,

  cc: LanguageId.Cpp,
  hxx: LanguageId.Cpp,
  cp: LanguageId.Cpp,
  hh: LanguageId.Cpp,
  inc: LanguageId.Cpp,
  // Depended on this PR: https://github.com/tree-sitter/tree-sitter-cpp/pull/173
  // ccm: LanguageId.CPP,
  // c++m: LanguageId.CPP,
  // cppm: LanguageId.CPP,
  // cxxm: LanguageId.CPP,
  css: LanguageId.CSS,
  phtml: LanguageId.PHP,
  php3: LanguageId.PHP,
  php4: LanguageId.PHP,
  php5: LanguageId.PHP,
  php7: LanguageId.PHP,
  phps: LanguageId.PHP,
  "php-s": LanguageId.PHP,
  bash: LanguageId.Bash,
  sh: LanguageId.Bash,
  mts: LanguageId.Typescript,
  cts: LanguageId.Typescript,
  // vue: LanguageId.VUE,  // tree-sitter-vue parser is broken
  // The .wasm file being used is faulty, and yaml is split line-by-line anyway for the most part
  // yaml: LanguageId.YAML,
  // yml: LanguageId.YAML,
  elm: LanguageId.Elm,
  mjs: LanguageId.Javascript,
  cjs: LanguageId.Javascript,
  pyw: LanguageId.Python,
  el: LanguageId.Elisp,
  emacs: LanguageId.Elisp,
  ex: LanguageId.Elixir,
  exs: LanguageId.Elixir,
  eex: LanguageId.EmbeddedTemplate,
  heex: LanguageId.EmbeddedTemplate,
  leex: LanguageId.EmbeddedTemplate,
  html: LanguageId.Html,
  htm: LanguageId.Html,
  lua: LanguageId.Lua,
  ocaml: LanguageId.Ocaml,
  ml: LanguageId.Ocaml,
  mli: LanguageId.Ocaml,
  ql: LanguageId.Ql,
  res: LanguageId.Rescript,
  resi: LanguageId.Rescript,
  erb: LanguageId.Ruby,
  rdl: LanguageId.Systemrdl,
  toml: LanguageId.Toml,

  // jl: LanguageId.JULIA,
  // swift: LanguageId.SWIFT,
  // kt: LanguageId.KOTLIN,
  // scala: LanguageId.SCALA,
};

export function languageForFilepath(filepath: string): LanguageId {
  return (
    languageByExtension[filepath.split(".").slice(-1)[0]] ||
    LanguageId.Typescript
  );
}
