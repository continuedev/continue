let vscode: any;
try {
  vscode = require('vscode');
} catch (e) {
  vscode = {
    commands: {
      executeCommand: (command: string, ...args: any[]) => {
        return Promise.resolve();
      },
      registerCommand: (command: string, callback: Function) => {
        return { dispose: () => {} };
      },
      getCommands: () => Promise.resolve([])
    },
    window: {
      createWebviewPanel: () => ({
        webview: { html: '', onDidReceiveMessage: () => ({ dispose: () => {} }) },
        onDidDispose: () => ({ dispose: () => {} }),
        reveal: () => {},
        dispose: () => {}
      })
    }
  };
}

// „Ç≥„Éû„É≥„ÉâÁôªÈå≤Áä∂ÊÖã„ÅÆËøΩË∑°
const registeredCommands = new Set<string>();

let thinkingPanel: any = null;
let thinkingQueue: {content: string, phase: string, progress: number}[] = [];
let isProcessingQueue = false;
let lastUpdateTime = 0;
const UPDATE_THROTTLE_MS = 2000;

let thinkingCompletedSent = false;
let thinkingActive = false;
let thinkingReset = true;

const sentContentHashes = new Set<string>();
const sentContentHistory: string[] = [];
const MAX_CONTENT_HISTORY = 20;
const MAX_HASH_HISTORY = 100;

/**
 * HTML„Çø„Ç∞„Çí„Ç®„Çπ„Ç±„Éº„Éó„Åô„ÇãÈñ¢Êï∞
 * @param text „Ç®„Çπ„Ç±„Éº„Éó„Åô„Çã„ÉÜ„Ç≠„Çπ„Éà
 * @returns „Ç®„Çπ„Ç±„Éº„Éó„Åï„Çå„Åü„ÉÜ„Ç≠„Çπ„Éà
 */
function escapeHtml(text: string): string {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

/**
 * ÊÄùËÄÉÊÆµÈöé„Å´Âøú„Åò„Åü„Ç¢„Ç§„Ç≥„É≥„ÇíËøî„ÅôÈñ¢Êï∞
 * @param phase ÊÄùËÄÉ„Éï„Çß„Éº„Ç∫Âêç
 * @returns ÂØæÂøú„Åô„Çã„Ç¢„Ç§„Ç≥„É≥ÔºàÁµµÊñáÂ≠óÔºâ
 */
function getPhaseIcon(phase: string): string {
  const lowerPhase = phase.toLowerCase();
  
  if (lowerPhase.includes('initial') || 
      lowerPhase.includes('planning') || 
      lowerPhase.includes('ÂàùÊúü') || 
      lowerPhase.includes('Ë®àÁîª')) {
    return 'üîç';
  } else if (lowerPhase.includes('analy') || 
             lowerPhase.includes('ËÄÉÂØü') || 
             lowerPhase.includes('ÂàÜÊûê')) {
    return 'üß†';
  } else if (lowerPhase.includes('strateg') || 
             lowerPhase.includes('Êà¶Áï•')) {
    return 'üó∫Ô∏è';
  } else if (lowerPhase.includes('implement') || 
             lowerPhase.includes('ÂÆüË£Ö') || 
             lowerPhase.includes('coding') || 
             lowerPhase.includes('„Ç≥„Éº„Éá„Ç£„É≥„Ç∞')) {
    return '‚öôÔ∏è';
  } else if (lowerPhase.includes('review') || 
             lowerPhase.includes('„É¨„Éì„É•„Éº') || 
             lowerPhase.includes('Á¢∫Ë™ç')) {
    return 'üîé';
  } else if (lowerPhase.includes('conclu') || 
             lowerPhase.includes('ÁµêË´ñ') || 
             lowerPhase.includes('„Åæ„Å®„ÇÅ')) {
    return '‚úÖ';
  } else if (lowerPhase.includes('error')) {
    return '‚ö†Ô∏è';
  }
  
  return 'ü§î';
}

/**
 * ÊÄùËÄÉÊÆµÈöé„Å´Âøú„Åò„ÅüCSS„ÇØ„É©„Çπ„ÇíËøî„ÅôÈñ¢Êï∞
 * @param phase ÊÄùËÄÉ„Éï„Çß„Éº„Ç∫Âêç
 * @returns ÂØæÂøú„Åô„ÇãCSS„ÇØ„É©„ÇπÂêç
 */
function getPhaseClass(phase: string): string {
  const lowerPhase = phase.toLowerCase();
  
  if (lowerPhase.includes('initial') || 
      lowerPhase.includes('planning') || 
      lowerPhase.includes('ÂàùÊúü') || 
      lowerPhase.includes('Ë®àÁîª')) {
    return 'thinking-initial';
  } else if (lowerPhase.includes('analy') || 
             lowerPhase.includes('ËÄÉÂØü') || 
             lowerPhase.includes('ÂàÜÊûê')) {
    return 'thinking-analysis';
  } else if (lowerPhase.includes('strateg') || 
             lowerPhase.includes('Êà¶Áï•')) {
    return 'thinking-strategy';
  } else if (lowerPhase.includes('implement') || 
             lowerPhase.includes('ÂÆüË£Ö') || 
             lowerPhase.includes('coding') || 
             lowerPhase.includes('„Ç≥„Éº„Éá„Ç£„É≥„Ç∞')) {
    return 'thinking-implementation';
  } else if (lowerPhase.includes('review') || 
             lowerPhase.includes('„É¨„Éì„É•„Éº') || 
             lowerPhase.includes('Á¢∫Ë™ç')) {
    return 'thinking-review';
  } else if (lowerPhase.includes('conclu') || 
             lowerPhase.includes('ÁµêË´ñ') || 
             lowerPhase.includes('„Åæ„Å®„ÇÅ')) {
    return 'thinking-conclusion';
  } else if (lowerPhase.includes('error')) {
    return 'thinking-error';
  }
  
  return 'thinking-default';
}

/**
 * „Éï„Çß„Éº„Ç∫Âêç„Çí‰∫∫Èñì„ÅåË™≠„Åø„ÇÑ„Åô„ÅÑÂΩ¢Âºè„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞
 * @param phase ÂÖÉ„ÅÆ„Éï„Çß„Éº„Ç∫Âêç
 * @returns Êï¥ÂΩ¢„Åï„Çå„Åü„Éï„Çß„Éº„Ç∫Âêç
 */
function formatPhaseName(phase: string): string {
  // Êó•Êú¨Ë™û„ÉªËã±Ë™û„ÅÆ„Éï„Çß„Éº„Ç∫Âêç„Éû„ÉÉ„Éî„É≥„Ç∞
  const phaseMapping: {[key: string]: string} = {
    'initial_analysis': 'ÂàùÊúüÂàÜÊûê',
    'planning': 'Ë®àÁîªÁ´ãÊ°à',
    'analyzing': 'ÂàÜÊûê‰∏≠',
    'strategizing': 'Êà¶Áï•Á´ãÊ°à',
    'implementing': 'ÂÆüË£Ö‰∏≠',
    'reviewing': '„É¨„Éì„É•„Éº‰∏≠',
    'concluding': 'ÁµêË´ñÂ∞éÂá∫',
    'initial': 'ÂàùÊúüÂàÜÊûê',
    'error': '„Ç®„É©„Éº'
  };
  
  // „Éû„ÉÉ„Éî„É≥„Ç∞„Å´Â≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØ„Åù„Çå„Çí‰ΩøÁî®
  if (phase in phaseMapping) {
    return phaseMapping[phase];
  }
  
  // Â≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÊï¥ÂΩ¢„Åó„Å¶Ëøî„Åô
  // „Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„Çí„Çπ„Éö„Éº„Çπ„Å´ÁΩÆÊèõ„Åó„ÄÅÊúÄÂàù„ÅÆÊñáÂ≠ó„ÇíÂ§ßÊñáÂ≠ó„Å´
  return phase.replace(/_/g, ' ')
              .replace(/\b\w/g, c => c.toUpperCase());
}

/**
 * „Ç≥„Éû„É≥„Éâ„ÇíÂÆâÂÖ®„Å´ÂÆüË°å„Åô„ÇãÈñ¢Êï∞
 * @param commandName ÂÆüË°å„Åô„Çã„Ç≥„Éû„É≥„ÉâÂêç
 * @param args „Ç≥„Éû„É≥„Éâ„Å´Ê∏°„ÅôÂºïÊï∞
 * @param fallback „Ç≥„Éû„É≥„Éâ„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅÆ‰ª£ÊõøÂá¶ÁêÜ
 */
function safeExecuteCommand(commandName: string, args: any[] = [], fallback?: () => void) {
  if (vscode && vscode.commands) {
    try {
      // „Åæ„Åö„Ç≥„Éû„É≥„Éâ„ÅåÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
      if (registeredCommands.has(commandName)) {
        vscode.commands.executeCommand(commandName, ...args);
      } else {
        // „Ç≥„Éû„É≥„Éâ„ÅåÂà©Áî®ÂèØËÉΩ„Åã„Å©„ÅÜ„Åã„ÇíÁ¢∫Ë™ç
        vscode.commands.getCommands(true).then((availableCommands: string[]) => {
          if (availableCommands.includes(commandName)) {
            registeredCommands.add(commandName);
            vscode.commands.executeCommand(commandName, ...args);
          } else if (fallback) {
            console.log(`Command ${commandName} not found, using alternative method`);
            fallback();
          }
        }).catch((err: any) => {
          console.error(`Error checking available commands: ${err}`);
          if (fallback) {
            fallback();
          }
        });
      }
    } catch (e) {
      console.error(`Error executing command ${commandName}:`, e);
      if (fallback) {
        fallback();
      }
    }
  } else if (fallback) {
    fallback();
  }
}

/**
 * Ëá™Ââç„ÅßThinkingPanel„ÇíÂàùÊúüÂåñ„Åô„Çã‰ª£ÊõøÈñ¢Êï∞
 */
function initializeThinkingPanelFallback() {
  if (!vscode || !vscode.window) {
    return;
  }
  
  try {
    // „Éë„Éç„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
    if (!thinkingPanel) {
      thinkingPanel = vscode.window.createWebviewPanel(
        'continueThinkingPanel',
        'Continue Thinking',
        vscode.ViewColumn.Two,
        {
          enableScripts: true,
          retainContextWhenHidden: true
        }
      );
      
      // „Éë„Éç„É´„ÅåÈñâ„Åò„Çâ„Çå„Åü„Å®„Åç„ÅÆÂá¶ÁêÜ
      thinkingPanel.onDidDispose(() => {
        thinkingPanel = null;
      });
    }
    
    // ÂàùÊúüHTMLË®≠ÂÆö
    thinkingPanel.webview.html = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Continue Thinking</title>
        <style>
          body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; 
            margin: 0; 
            padding: 10px; 
            line-height: 1.5;
          }
          .thinking-initial { border-left: 3px solid #007acc; padding-left: 10px; background-color: rgba(0, 122, 204, 0.05); margin-bottom: 10px; }
          .thinking-analysis { border-left: 3px solid #9966cc; padding-left: 10px; background-color: rgba(153, 102, 204, 0.05); margin-bottom: 10px; }
          .thinking-strategy { border-left: 3px solid #ff8c00; padding-left: 10px; background-color: rgba(255, 140, 0, 0.05); margin-bottom: 10px; }
          .thinking-implementation { border-left: 3px solid #0099cc; padding-left: 10px; background-color: rgba(0, 153, 204, 0.05); margin-bottom: 10px; }
          .thinking-review { border-left: 3px solid #ff6666; padding-left: 10px; background-color: rgba(255, 102, 102, 0.05); margin-bottom: 10px; }
          .thinking-conclusion { border-left: 3px solid #00aa00; padding-left: 10px; background-color: rgba(0, 170, 0, 0.05); margin-bottom: 10px; }
          .thinking-default { border-left: 3px solid #888888; padding-left: 10px; margin-bottom: 10px; }
          .thinking-error { border-left: 3px solid #ee0000; padding-left: 10px; background-color: rgba(238, 0, 0, 0.05); margin-bottom: 10px; }
          .thinking-section-header { font-weight: bold; margin-top: 10px; }
          .thinking-progress-bar { height: 4px; background-color: #eee; margin: 5px 0; }
          .thinking-progress-value { height: 100%; background-color: #007acc; transition: width 0.3s; }
          code { font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 0.9em; }
          pre { background-color: rgba(0, 0, 0, 0.05); padding: 8px; border-radius: 3px; overflow: auto; }
        </style>
        <script>
          window.addEventListener('message', event => {
            const message = event.data;
            if (message.command === 'appendContent') {
              const content = document.getElementById('thinking-content');
              content.innerHTML += message.content;
              window.scrollTo(0, document.body.scrollHeight);
            }
          });
        </script>
      </head>
      <body>
        <div id="thinking-content"></div>
      </body>
      </html>
    `;
    
    console.log("Thinking panel created with fallback method");
  } catch (e) {
    console.error("Error creating thinking panel with fallback method:", e);
  }
}

/**
 * „Éë„Éç„É´„Å´ÊÄùËÄÉ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíËøΩÂä†„Åô„Çã‰ª£ÊõøÈñ¢Êï∞
 */
function appendThinkingContentFallback(content: string) {
  if (!thinkingPanel) {
    initializeThinkingPanelFallback();
  }
  
  if (thinkingPanel && thinkingPanel.webview) {
    try {
      // „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°„Åó„Å¶„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÊõ¥Êñ∞
      thinkingPanel.webview.postMessage({
        command: 'appendContent',
        content: content
      });
      
      // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÊñπÊ≥ï: Áõ¥Êé•HTML„ÇíÊõ¥Êñ∞
      const currentHtml = thinkingPanel.webview.html;
      const contentDivIndex = currentHtml.indexOf('<div id="thinking-content">');
      if (contentDivIndex > -1) {
        const closingDivIndex = currentHtml.indexOf('</div>', contentDivIndex);
        if (closingDivIndex > -1) {
          const beforeContent = currentHtml.substring(0, contentDivIndex + '<div id="thinking-content">'.length);
          const existingContent = currentHtml.substring(
            contentDivIndex + '<div id="thinking-content">'.length, 
            closingDivIndex
          );
          const afterContent = currentHtml.substring(closingDivIndex);
          
          thinkingPanel.webview.html = beforeContent + existingContent + content + afterContent;
        }
      }
      
      // Ë°®Á§∫„ÇíÁ¢∫ÂÆü„Å´„Åô„Çã„Åü„ÇÅ„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó: „Éë„Éç„É´„ÇíË°®Á§∫
      try {
        thinkingPanel.reveal();
      } catch (e) {
        console.error("Error revealing thinking panel:", e);
      }
    } catch (e) {
      console.error("Error updating thinking panel content:", e);
      // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØ„Éë„Éç„É´„ÇíÂÜç‰ΩúÊàê
      try {
        if (thinkingPanel) {
          thinkingPanel.dispose();
        }
      } catch (disposeError) {}
      
      thinkingPanel = null;
      initializeThinkingPanelFallback();
      
      // ÂÜç‰ΩúÊàê„Åó„Åü„Éë„Éç„É´„Å´„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíËøΩÂä†
      if (thinkingPanel && thinkingPanel.webview) {
        thinkingPanel.webview.html = thinkingPanel.webview.html.replace(
          '<div id="thinking-content"></div>',
          `<div id="thinking-content">${content}</div>`
        );
      }
    }
  }
}

/**
 * ÊÄùËÄÉ„Éë„Éç„É´„ÇíÁôªÈå≤„Åô„ÇãÈñ¢Êï∞
 * @param context Êã°ÂºµÊ©üËÉΩ„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà
 */
export function registerThinkingPanel(context: any) {
  if (!vscode || !vscode.commands) {
    return;
  }
  
  try {
    // „Åæ„ÅöÂøÖË¶Å„Å™„Ç≥„Éû„É≥„Éâ„ÇíÁôªÈå≤„Åô„Çã
    if (context && context.subscriptions) {
      // resetThinkingPanel„Ç≥„Éû„É≥„Éâ
      const resetCommand = vscode.commands.registerCommand('continue.resetThinkingPanel', () => {
        console.log("Thinking panel reset");
        resetThinkingState();
      });
      
      // appendThinkingChunk„Ç≥„Éû„É≥„Éâ
      const appendCommand = vscode.commands.registerCommand('continue.appendThinkingChunk', 
        (content: string, phase: string, progress: number) => {
          console.log(`Thinking chunk appended - Progress: ${Math.round(progress * 100)}%`);
          if (thinkingPanel) {
            appendThinkingContentFallback(content);
          } else {
            initializeThinkingPanelFallback();
            appendThinkingContentFallback(content);
          }
      });
      
      // forceRefreshThinking„Ç≥„Éû„É≥„Éâ
      const refreshCommand = vscode.commands.registerCommand('continue.forceRefreshThinking', 
        (force: boolean) => {
          // „Éë„Éç„É´„ÅÆË°®Á§∫„ÇíÂº∑Âà∂Êõ¥Êñ∞
          if (thinkingPanel) {
            try {
              thinkingPanel.reveal();
            } catch (e) {
              console.error("Error revealing thinking panel:", e);
              // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØ„Éë„Éç„É´„ÇíÂÜç‰ΩúÊàê
              thinkingPanel = null;
              initializeThinkingPanelFallback();
            }
          } else {
            initializeThinkingPanelFallback();
          }
      });
      
      // thinkingCompleted„Ç≥„Éû„É≥„Éâ
      const completedCommand = vscode.commands.registerCommand('continue.thinkingCompleted', () => {
        console.log("Thinking process completed");
        thinkingCompletedSent = true;
      });
      
      // „Ç≥„Éû„É≥„Éâ„Çí„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´ÁôªÈå≤
      context.subscriptions.push(
        resetCommand,
        appendCommand,
        refreshCommand,
        completedCommand
      );
      
      // ÁôªÈå≤Ê∏à„Åø„Ç≥„Éû„É≥„Éâ„ÇíË®òÈå≤
      registeredCommands.add('continue.resetThinkingPanel');
      registeredCommands.add('continue.appendThinkingChunk');
      registeredCommands.add('continue.forceRefreshThinking');
      registeredCommands.add('continue.thinkingCompleted');
      
      console.log("Thinking panel commands registered with extension context");
    }
    
    // „Ç≥„Éû„É≥„ÉâÁôªÈå≤Âæå„Å´UIÁî®„ÅÆ„Éë„Éç„É´Ëá™‰Ωì„ÇíÁôªÈå≤
    try {
      vscode.commands.executeCommand('continue.registerThinkingPanel', context);
    } catch (e) {
      console.error("Error registering thinking panel, using fallback:", e);
      // Êó¢Â≠ò„ÅÆ„Éë„Éç„É´ÁôªÈå≤„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ‰ª£ÊõøÂá¶ÁêÜ
      initializeThinkingPanelFallback();
    }
    
    // „Ç´„Çπ„Çø„É†CSS„ÇíÁôªÈå≤
    try {
      vscode.commands.executeCommand('continue.setThinkingPanelStyles', `
        .thinking-initial { border-left: 3px solid #007acc; padding-left: 10px; background-color: rgba(0, 122, 204, 0.05); margin-bottom: 10px; }
        .thinking-analysis { border-left: 3px solid #9966cc; padding-left: 10px; background-color: rgba(153, 102, 204, 0.05); margin-bottom: 10px; }
        .thinking-strategy { border-left: 3px solid #ff8c00; padding-left: 10px; background-color: rgba(255, 140, 0, 0.05); margin-bottom: 10px; }
        .thinking-implementation { border-left: 3px solid #0099cc; padding-left: 10px; background-color: rgba(0, 153, 204, 0.05); margin-bottom: 10px; }
        .thinking-review { border-left: 3px solid #ff6666; padding-left: 10px; background-color: rgba(255, 102, 102, 0.05); margin-bottom: 10px; }
        .thinking-conclusion { border-left: 3px solid #00aa00; padding-left: 10px; background-color: rgba(0, 170, 0, 0.05); margin-bottom: 10px; }
        .thinking-default { border-left: 3px solid #888888; padding-left: 10px; margin-bottom: 10px; }
        .thinking-error { border-left: 3px solid #ee0000; padding-left: 10px; background-color: rgba(238, 0, 0, 0.05); margin-bottom: 10px; }
        .thinking-section-header { font-weight: bold; margin-top: 10px; }
        .thinking-progress-bar { height: 4px; background-color: #eee; margin: 5px 0; }
        .thinking-progress-value { height: 100%; background-color: #007acc; transition: width 0.3s; }
        code { font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 0.9em; }
        pre { background-color: rgba(0, 0, 0, 0.05); padding: 8px; border-radius: 3px; overflow: auto; }
      `);
    } catch (e) {
      // „Çπ„Çø„Ç§„É´Ë®≠ÂÆö„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØÁÑ°Ë¶ñ
      console.log("Could not set thinking panel styles, using defaults");
    }
    
    // ÂàùÊúüÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
    resetThinkingState();
  } catch (e) {
    console.error("Error in registerThinkingPanel:", e);
    // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇ‰ª£ÊõøÊñπÊ≥ï„Åß„Éë„Éç„É´„ÇíÂàùÊúüÂåñ
    initializeThinkingPanelFallback();
  }
}

/**
 * ÊÄùËÄÉÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà„Åô„ÇãÈñ¢Êï∞
 */
function resetThinkingState() {
  thinkingCompletedSent = false;
  thinkingActive = false;
  thinkingReset = true;
  thinkingQueue = [];
  isProcessingQueue = false;
  sentContentHashes.clear();
  sentContentHistory.length = 0;
  
  // ÂÆâÂÖ®„Å´„Éë„Éç„É´„É™„Çª„ÉÉ„Éà„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å
  safeExecuteCommand('continue.resetThinkingPanel', [], () => {
    // ‰ª£ÊõøÂá¶ÁêÜ: „Éë„Éç„É´„ÇíÂÜçÂàùÊúüÂåñ
    if (thinkingPanel) {
      try {
        thinkingPanel.dispose();
      } catch (e) {
        console.error("Error disposing thinking panel:", e);
      }
      thinkingPanel = null;
    }
    initializeThinkingPanelFallback();
  });
}

/**
 * „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆ„Éè„ÉÉ„Ç∑„É•„ÇíË®àÁÆó
 * @param content „Éè„ÉÉ„Ç∑„É•Âåñ„Åô„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ
 * @returns „Éè„ÉÉ„Ç∑„É•ÂÄ§
 */
function hashThinkingContent(content: string): string {
  return content.substring(0, 100) + content.length.toString();
}

/**
 * Â§ßÈáè„ÅÆ„Éè„ÉÉ„Ç∑„É•„Åß„É°„É¢„É™„ÇíÂúßËø´„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´Âè§„ÅÑ„Éè„ÉÉ„Ç∑„É•„ÇíÂâäÈô§
 */
function manageHashHistory() {
  if (sentContentHashes.size > MAX_HASH_HISTORY) {
    // Âè§„ÅÑ„Éè„ÉÉ„Ç∑„É•„ÇíÂâäÈô§ÔºàÂÖàÈ†≠„Åã„Çâ20%„ÇíÂâäÈô§Ôºâ
    const toDelete = Math.floor(MAX_HASH_HISTORY * 0.2);
    let count = 0;
    for (const hash of sentContentHashes) {
      sentContentHashes.delete(hash);
      count++;
      if (count >= toDelete) break;
    }
  }
}

/**
 * ÊÄùËÄÉ„Ç≠„É•„Éº„ÇíÂá¶ÁêÜ„Åô„ÇãÈñ¢Êï∞
 */
function processThinkingQueue() {
  if (isProcessingQueue || thinkingQueue.length === 0) return;
  
  isProcessingQueue = true;
  const now = Date.now();
  
  if (now - lastUpdateTime < UPDATE_THROTTLE_MS) {
    setTimeout(processThinkingQueue, UPDATE_THROTTLE_MS - (now - lastUpdateTime));
    isProcessingQueue = false;
    return;
  }
  
  // „Ç≠„É•„Éº„Åã„ÇâÊúÄÊñ∞„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÂèñÂæó
  const latest = thinkingQueue.pop();
  if (!latest) {
    isProcessingQueue = false;
    return;
  }
  
  // ÊÆã„Çä„ÅÆ„Ç≠„É•„Éº„ÇíÁµêÂêà
  let combinedContent = latest.content;
  while (thinkingQueue.length > 0) {
    const nextItem = thinkingQueue.pop();
    if (nextItem) {
      combinedContent += nextItem.content;
    }
  }
  thinkingQueue = [];
  
  // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
  const contentHash = hashThinkingContent(combinedContent);
  if (sentContentHashes.has(contentHash)) {
    isProcessingQueue = false;
    return;
  }
  
  // Â±•Ê≠¥„Å®ÈáçË§á„Éè„ÉÉ„Ç∑„É•„ÇíÊõ¥Êñ∞
  sentContentHashes.add(contentHash);
  sentContentHistory.push(combinedContent);
  if (sentContentHistory.length > MAX_CONTENT_HISTORY) {
    sentContentHistory.shift();
  }
  
  // „Éè„ÉÉ„Ç∑„É•Â±•Ê≠¥„ÅÆÁÆ°ÁêÜ
  manageHashHistory();
  
  // ÊÄùËÄÉÂÜÖÂÆπ„ÇíUI„Å´ÈÄÅ‰ø°
  thinkingActive = true;
      
  // ÊúÄÂàù„ÅÆÊõ¥Êñ∞„ÅÆÂ†¥Âêà„ÄÅ„Éë„Éç„É´„Çí„É™„Çª„ÉÉ„Éà
  if (thinkingReset) {
    safeExecuteCommand('continue.resetThinkingPanel', [], () => {
      if (thinkingPanel) {
        try {
          thinkingPanel.dispose();
        } catch (e) {
          console.error("Error disposing thinking panel:", e);
        }
        thinkingPanel = null;
      }
      initializeThinkingPanelFallback();
    });
    thinkingReset = false;
  }
  
  setTimeout(() => {
    // „Ç≥„Éû„É≥„Éâ„ÇíÂÆâÂÖ®„Å´ÂÆüË°å
    safeExecuteCommand('continue.appendThinkingChunk', [combinedContent, latest.phase, latest.progress], () => {
      appendThinkingContentFallback(combinedContent);
    });
    
    safeExecuteCommand('continue.forceRefreshThinking', [true], () => {
      if (thinkingPanel) {
        try {
          thinkingPanel.reveal();
        } catch (e) {
          console.error("Error revealing thinking panel:", e);
        }
      } else {
        initializeThinkingPanelFallback();
      }
    });
    
    lastUpdateTime = Date.now();
    isProcessingQueue = false;
    
    if (thinkingQueue.length > 0) {
      processThinkingQueue();
    }
  }, 0);
}

/**
 * ÊÄùËÄÉÂÜÖÂÆπ„ÇíÊõ¥Êñ∞„Åó„ÄÅUI„Å´Ë°®Á§∫„Åô„ÇãÈñ¢Êï∞
 * @param content ÊÄùËÄÉÂÜÖÂÆπ„ÅÆ„ÉÜ„Ç≠„Çπ„Éà
 * @param phase ÊÄùËÄÉ„ÅÆÊÆµÈöéÔºà„Éï„Çß„Éº„Ç∫Ôºâ
 * @param progress ÈÄ≤ÊçóÂ∫¶Ôºà0„Äú1„ÅÆÂÄ§Ôºâ
 */
export function updateThinking(content: string, phase: string, progress: number) {
  if (!content || content.trim() === "") {
    return;
  }
  
  // Êó¢„Å´ÂÆå‰∫Ü„Åó„Å¶„ÅÑ„ÅüÂ†¥Âêà„ÅØ„É™„Çª„ÉÉ„Éà
  if (thinkingCompletedSent) {
    resetThinkingState();
  }
  
  thinkingActive = true;
  
  // HTML„Çø„Ç∞„Çí„Ç®„Çπ„Ç±„Éº„ÉóÔºà„Åì„Åì„Åß‰∏ÄÂÖÉÁöÑ„Å´Âá¶ÁêÜÔºâ
  const safeContent = escapeHtml(content);
  
  // „Éï„Çß„Éº„Ç∫Âêç„ÇíÊï¥ÂΩ¢
  const formattedPhaseName = formatPhaseName(phase);
  
  // „Ç¢„Ç§„Ç≥„É≥„ÇíÂèñÂæó
  const phaseIcon = getPhaseIcon(phase);
  
  // ÈÄ≤ÊçóÁéá„Çí„Éë„Éº„Çª„É≥„Éà„ÅßË°®Á§∫
  const progressPercent = Math.round(progress * 100);
  
  // Âº∑Âåñ„Åï„Çå„Åü„Éï„Çß„Éº„Ç∫Ë°®Á§∫„Çí‰ΩúÊàê
  const enhancedPhase = `${phaseIcon} ${formattedPhaseName} (${progressPercent}%)`;
  
  // „Éï„Çß„Éº„Ç∫„Å´ÂØæÂøú„Åô„ÇãCSS„ÇØ„É©„Çπ„ÇíÂèñÂæó
  const phaseClass = getPhaseClass(phase);
  
  // „Çπ„Çø„Ç§„É´‰ªò„Åç„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí‰ΩúÊàê
  const styledContent = `
    <div class="${phaseClass}">
      <div class="thinking-progress-bar">
        <div class="thinking-progress-value" style="width: ${progressPercent}%"></div>
      </div>
      ${safeContent}
    </div>
  `;
  
  // ÂäπÁéáÁöÑ„Å™ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
  const quickHash = content.substring(0, 50) + content.length.toString(); 
  if (sentContentHashes.has(quickHash)) {
    return;
  }
  
  thinkingQueue.push({ 
    content: styledContent, 
    phase: enhancedPhase, 
    progress 
  });
  
  processThinkingQueue();
}

/**
 * ÊÄùËÄÉ„Éó„É≠„Çª„Çπ„ÅåÂÆå‰∫Ü„Åó„Åü„Åì„Å®„ÇíÈÄöÁü•„Åô„ÇãÈñ¢Êï∞
 */
export function thinkingCompleted() {
  if (!thinkingActive || thinkingCompletedSent) {
    return;
  }
  
  // „Ç≠„É•„Éº„Çí„ÇØ„É™„Ç¢
  thinkingQueue = [];
  isProcessingQueue = false;
  
  // „Ç≥„Éû„É≥„Éâ„ÇíÂÆâÂÖ®„Å´ÂÆüË°å
  safeExecuteCommand('continue.thinkingCompleted', [], () => {
    thinkingCompletedSent = true;
    
    if (!thinkingPanel) {
      initializeThinkingPanelFallback();
    }
  });
  
  // ÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
  const completionMessage = '<div class="thinking-conclusion" style="text-align: center; padding: 10px; margin-top: 10px;">' +
                           '‚ú® ÊÄùËÄÉ„Éó„É≠„Çª„ÇπÂÆå‰∫Ü ‚ú®' +
                           '</div>';
  
  safeExecuteCommand('continue.appendThinkingChunk', [completionMessage, '‚úÖ ÂÆå‰∫Ü', 1.0], () => {
    appendThinkingContentFallback(completionMessage);
  });
  
  thinkingCompletedSent = true;
  
  // „Éë„Éç„É´„ÅÆÊõ¥Êñ∞
  setTimeout(() => {
    safeExecuteCommand('continue.forceRefreshThinking', [false], () => {
      if (thinkingPanel) {
        try {
          thinkingPanel.reveal();
        } catch (e) {
          console.error("Error revealing thinking panel:", e);
          thinkingPanel = null;
          initializeThinkingPanelFallback();
          
          // ÂÜç‰ΩúÊàê„Åó„Åü„Éë„Éç„É´„Å´ÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËøΩÂä†
          appendThinkingContentFallback(completionMessage);
        }
      } else {
        initializeThinkingPanelFallback();
        appendThinkingContentFallback(completionMessage);
      }
    });
  }, 100);
}