import { ChatMessage, SlashCommand } from "../..";
import { stripImages } from "../../llm/countTokens";
import { removeQuotesAndEscapes } from "../../util";
import axios from 'axios';

// Interfaces for command configuration and issue data
interface CommandConfig {
  repositoryUrl: string;
  githubToken: string;
}

interface IssueData {
  title: string;
  body: string;
}

const PROMPT = (
  input: string,
  title: string,
) => `You will be asked to generate the body of a GitHub issue given a user request. You should follow these rules:
- Be descriptive but do not make up details
- If the the user request includes any code snippets that are relevant, reference them in code blocks
- Describe step by step how to reproduce the problem
- Describe the ideal solution to the problem
- Describe the expected behavior after the issue has been resolved
- This issue will be read by a team member
- Use markdown formatting, but you do not need to surround the entire body with triple backticks
{additional_instructions}

Here is the user request: '${input}'

Title: ${title}

Body:\n\n`;

const DraftIssueCommand: SlashCommand = {
  name: "issue",
  description: "Draft a GitHub issue",
  run: async function* ({ input, llm, history, params }) {
    if (this?.params?.repositoryUrl === undefined || this?.params?.repositoryUrl === "") {
      yield "This command requires a repository URL to be set in the config file.";
      return;
    }

    //get issue title
    let title = await llm.complete(
      `Generate a title for the GitHub issue requested in this user input: '${input}'. Use no more than 20 words and output nothing other than the title. Do not surround it with quotes. The title is: `,
      { maxTokens: 20 },
    );

    title = '# DRAFT (Continue-generated): ' + removeQuotesAndEscapes(title.trim()) + "\n\n";
    yield title;
    
    //get issue body
    let body = "## DRAFT: GENERATED BY CONTINUE \n";
    const messages: ChatMessage[] = [
      ...history,
      { role: "user", content: PROMPT(input, title) },
    ];

    for await (const chunk of llm.streamChat(messages)) {
      body += chunk.content;
      yield stripImages(chunk.content);
    }

    //Create isssue in github via api
    const response = await createGitHubIssue(title, body, {
      repositoryUrl: this.params.repositoryUrl,
      githubToken: this.params.githubToken || process.env.GITHUB_TOKEN
    });

    yield '\n\n'+response
  },
};

async function createGitHubIssue(title: string, body: string, config: CommandConfig): Promise<string> {
  if (config.githubToken === undefined) {
    return "Github token not provided - define it in env vars or in config params"
  }

  const url = `${config.repositoryUrl}/issues`;
  try {
    const response = await axios.post(url, {
      title: title.trim(),
      body
    }, {
      headers: {
        'Authorization': `token ${config.githubToken}`,
        'Accept': 'application/vnd.github.v3+json'
      }
    });
    return `[Link to draft of issue](${response.data.html_url})`;  // Returns the URL to the created issue
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Error creating issue:', error.response?.data || error.message);
      return 'Error creating issue:' + (error.response?.data || error.message)
    } else {
      console.error('Unknown error type:', error);
      return 'Error creating issue '+ error
    }
  }
}

export default DraftIssueCommand;
