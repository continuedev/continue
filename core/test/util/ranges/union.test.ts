import { union } from "../../../util/ranges";

// This file is generated by Continue
interface Position {
  line: number;
  character: number;
}

interface Range {
  start: Position;
  end: Position;
}

describe("union", () => {
  let rangeA: Range;
  let rangeB: Range;

  beforeEach(() => {
    rangeA = {
      start: { line: 1, character: 0 },
      end: { line: 3, character: 5 },
    };

    rangeB = {
      start: { line: 2, character: 3 },
      end: { line: 4, character: 2 },
    };
  });

  test("should return the union of two overlapping ranges", () => {
    const result = union(rangeA, rangeB);
    expect(result).toEqual({
      start: { line: 1, character: 0 },
      end: { line: 4, character: 2 },
    });
  });

  test("should return the union when ranges are identical", () => {
    const result = union(rangeA, rangeA);
    expect(result).toEqual(rangeA);
  });

  test("should return the union when ranges do not overlap but are adjacent", () => {
    rangeB = {
      start: { line: 3, character: 5 },
      end: { line: 4, character: 2 },
    };
    const result = union(rangeA, rangeB);
    expect(result).toEqual({
      start: { line: 1, character: 0 },
      end: { line: 4, character: 2 },
    });
  });

  test("should return the union when one range is completely within the other", () => {
    rangeB = {
      start: { line: 2, character: 1 },
      end: { line: 2, character: 4 },
    };
    const result = union(rangeA, rangeB);
    expect(result).toEqual(rangeA);
  });

  test("should return the union when ranges do not overlap and are not adjacent", () => {
    rangeB = {
      start: { line: 4, character: 3 },
      end: { line: 5, character: 1 },
    };
    const result = union(rangeA, rangeB);
    expect(result).toEqual({
      start: { line: 1, character: 0 },
      end: { line: 5, character: 1 },
    });
  });

  // TODO
  test.skip("should handle edge case where start and end lines are the same", () => {
    rangeA = {
      start: { line: 1, character: 0 },
      end: { line: 1, character: 5 },
    };
    rangeB = {
      start: { line: 1, character: 3 },
      end: { line: 1, character: 7 },
    };
    const result = union(rangeA, rangeB);
    expect(result).toEqual({
      start: { line: 1, character: 0 },
      end: { line: 1, character: 7 },
    });
  });
});
