import { maxPosition, minPosition } from "../../../util/ranges";

// This file is generated by Continue
interface Position {
  line: number;
  character: number;
}

describe("Position comparison functions", () => {
  let pos1: Position;
  let pos2: Position;
  let pos3: Position;
  let pos4: Position;

  beforeAll(() => {
    // Setup: Initializing positions
    pos1 = { line: 1, character: 5 };
    pos2 = { line: 2, character: 3 };
    pos3 = { line: 1, character: 7 };
    pos4 = { line: 2, character: 3 }; // Same as pos2 to test equality
  });

  describe("maxPosition", () => {
    it("should return the position with the greater line number", () => {
      expect(maxPosition(pos1, pos2)).toEqual(pos2);
    });

    it("should return the position with the greater character number when lines are equal", () => {
      expect(maxPosition(pos1, pos3)).toEqual(pos3);
    });

    it("should return the first position when both positions are equal", () => {
      expect(maxPosition(pos2, pos4)).toEqual(pos2);
    });

    it("should handle positions with negative line numbers", () => {
      const posNegative = { line: -1, character: 0 };
      expect(maxPosition(posNegative, pos1)).toEqual(pos1);
    });

    it("should handle positions with negative character numbers", () => {
      const posNegativeChar = { line: 1, character: -1 };
      expect(maxPosition(posNegativeChar, pos1)).toEqual(pos1);
    });
  });

  describe("minPosition", () => {
    it("should return the position with the lesser line number", () => {
      expect(minPosition(pos1, pos2)).toEqual(pos1);
    });

    it("should return the position with the lesser character number when lines are equal", () => {
      expect(minPosition(pos1, pos3)).toEqual(pos1);
    });

    it("should return the first position when both positions are equal", () => {
      expect(minPosition(pos2, pos4)).toEqual(pos2);
    });

    it("should handle positions with negative line numbers", () => {
      const posNegative = { line: -1, character: 0 };
      expect(minPosition(posNegative, pos1)).toEqual(posNegative);
    });

    it("should handle positions with negative character numbers", () => {
      const posNegativeChar = { line: 1, character: -1 };
      expect(minPosition(posNegativeChar, pos1)).toEqual(posNegativeChar);
    });
  });
});
