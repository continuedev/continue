# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run Qodana inspections.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
# - Create a draft release.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  push:
    branches: [main, preview]
  # Trigger the workflow on any pull request
  # pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: ./extensions/intellij

jobs:
  # Prepare environment and build the plugin
  build:
    name: Build
    runs-on: macos-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/actions/wrapper-validation@v3

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          # CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG=""

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pluginVerifierHomeDir=~/.pluginVerifier" >> $GITHUB_OUTPUT

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Setup Node.js
      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      # Cache node_modules
      - name: Cache core node_modules
        uses: actions/cache@v3
        with:
          path: core/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('core/package-lock.json') }}

      - name: Cache binary node_modules
        uses: actions/cache@v3
        with:
          path: binary/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('binary/package-lock.json') }}

      - name: Cache gui node_modules
        uses: actions/cache@v3
        with:
          path: gui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('gui/package-lock.json') }}

      # npm install core
      - name: Install core node_modules
        run: |
          cd ../../core
          npm ci

      # npm install binary
      - name: Install core node_modules
        run: |
          cd ../../binary
          npm ci

      # npm install gui
      - name: Install gui node_modules
        run: |
          cd ../../gui
          npm ci

      # build gui
      - name: Build gui
        run: |
          cd ../../gui
          npm run build

      # Run prepackage.js script
      - name: Run prepackage script
        run: |
          cd ../../extensions/vscode
          npm ci
          npm run prepackage
        env:
          # https://github.com/microsoft/vscode-ripgrep/issues/9#issuecomment-643965333
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}

      # Build binaries
      - name: Build the binaries
        run: |
          cd ../../binary
          npm run build

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ../../extensions/intellij/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME%.????}" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./extensions/intellij/build/distributions/content/*/*

      # Upload binaries as artifacts
      - name: Upload artifact (darwin-arm64)
        uses: actions/upload-artifact@v4
        with:
          name: continue-binary-darwin-arm64
          path: ./binary/bin/darwin-arm64/

      - name: Upload artifact (darwin-x64)
        uses: actions/upload-artifact@v4
        with:
          name: continue-binary-darwin-x64
          path: ./binary/bin/darwin-x64/

      - name: Upload artifact (win32-x64)
        uses: actions/upload-artifact@v4
        with:
          name: continue-binary-win32-x64
          path: ./binary/bin/win32-x64/

      - name: Upload artifact (linux-arm64)
        uses: actions/upload-artifact@v4
        with:
          name: continue-binary-linux-arm64
          path: ./binary/bin/linux-arm64/

      - name: Upload artifact (linux-x64)
        uses: actions/upload-artifact@v4
        with:
          name: continue-binary-linux-x64
          path: ./binary/bin/linux-x64/

  test-binaries:
    needs: build
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            npm_config_arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            npm_config_arch: x64
          # arm64 not actually supported by GitHub
          # - os: ubuntu-latest
          #   platform: linux
          #   arch: arm64
          #   npm_config_arch: arm64
          - os: macos-12
            platform: darwin
            arch: x64
            npm_config_arch: x64
          - os: macos-latest
            platform: darwin
            arch: arm64
            npm_config_arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      # 1. Check-out repository
      - name: Check-out repository
        uses: actions/checkout@v4

      # 2. Install npm dependencies
      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Cache core node_modules
        uses: actions/cache@v3
        with:
          path: core/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('core/package-lock.json') }}

      - name: Cache binary node_modules
        uses: actions/cache@v3
        with:
          path: binary/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('binary/package-lock.json') }}

      - name: Install Core Dependencies
        run: |
          cd ../../core
          npm ci

      - name: Install Binary Dependencies
        run: |
          cd ../../binary
          npm ci

      # Download the binary artifact
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: continue-binary-${{ matrix.platform }}-${{ matrix.arch }}
          path: ./binary/bin/${{ matrix.platform }}-${{ matrix.arch }}/

      # Set execute permissions for the binary (non-Windows)
      - name: Set execute permissions
        run: |
          cd ../../binary/bin/${{ matrix.platform }}-${{ matrix.arch }}
          chmod +x continue-binary
          chmod +x node_sqlite3.node
          chmod +x index.node
          chmod +x esbuild
        if: ${{ matrix.platform }} != 'win32'

      - name: Copy node_sqlite3.node to necessary location
        run: |
          cd ../../binary
          mkdir build
          cp ./bin/${{ matrix.platform }}-${{ matrix.arch }}/node_sqlite3.node ./build/node_sqlite3.node

      # Run tests for binary
      - name: Run binary tests
        run: |
          cd ../../binary
          npm run test

      - name: Upload logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: core-logs-${{ matrix.platform }}-${{ matrix.arch }}
          path: binary/.continue/logs/core.log

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: tests-result
          path: ${{ github.workspace }}/extensions/intellij/build/reports/tests

      # Upload the Kover report to CodeCov
      # - name: Upload Code Coverage Report
      #   uses: codecov/codecov-action@v4
      #   with:
      #     files: ${{ github.workspace }}/build/reports/kover/report.xml

  # Run Qodana inspections and provide report
  inspectCode:
    if: false
    name: Inspect code
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:
      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2024.1.5
        with:
          cache-default-branch-only: true

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [build, test, test-binaries, verify]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Tag the repository
        id: tag
        run: |
          # See https://docs.github.com/en/get-started/using-git/dealing-with-special-characters-in-branch-and-tag-names
          TAG=v${{ needs.build.outputs.version }}-jetbrains
          echo "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag -a $TAG -m "Published version $TAG" ${GITHUB_SHA}
          git push origin $TAG

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.tag.outputs.tag }}" \
            --draft \
            --title "v${{ needs.build.outputs.version }}-jetbrains" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"

      # Download the Gradle build artifact
      - name: Download Gradle build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.filename }}
          path: ./artifacts
