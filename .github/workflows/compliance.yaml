name: PR Compliance Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  conventional-commits:
    name: Validate Conventional Commits (Warning Only)
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    continue-on-error: true
    permissions:
      pull-requests: write
      issues: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate conventional commits
        id: commitlint
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: .commitlintrc.warning.json
        continue-on-error: true

      - name: Add commit message guidance comment
        if: steps.commitlint.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Conventional Commit Format')
            );

            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: [
                  "## ‚ö†Ô∏è Conventional Commit Format",
                  "",
                  "Your commit messages don't follow the conventional commit format, but **this won't block your PR from being merged**. We recommend downloading [this extension](https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits) if you are using VS Code.",
                  "",
                  "### Expected Format:",
                  "```",
                  "<type>[optional scope]: <description>",
                  "",
                  "[optional body]",
                  "",
                  "[optional footer(s)]",
                  "```",
                  "",
                  "### Examples:",
                  "- `feat: add changelog generation support`",
                  "- `fix: resolve login redirect issue`",
                  "- `docs: update README with new instructions`",
                  "- `chore: update dependencies`",
                  "",
                  "### Valid Types:",
                  "`feat`, `fix`, `docs`, `style`, `refactor`, `perf`, `test`, `build`, `ci`, `chore`, `revert`",
                  "",
                  "This helps with:",
                  "- üìù Automatic changelog generation",
                  "- üöÄ Automated semantic versioning", 
                  "- üìä Better project history tracking",
                  "",
                  "*This is a non-blocking warning - your PR can still be merged without fixing this.*"
                ].join('\n')
              });
            }

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Fix vulnerabilities
        run: npm audit fix

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Use this for any files that we want to be certain exist
  # Basically creates a forcing function to discuss were anyone to want to remove them
  file-validation:
    name: Required Files Check
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required files
        run: |
          required_files=(
            "package.json"
            "package-lock.json"
            "README.md"
            "LICENSE"
            ".gitignore"
            "tsconfig.json"
            "SECURITY.md"
            "CONTRIBUTING.md"
            ".nvmrc"
            ".prettierrc"
            ".prettierignore"
          )

          missing_files=()
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done

          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "‚ùå Missing required files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          else
            echo "‚úÖ All required files present"
          fi

  compliance-summary:
    name: Compliance Summary
    runs-on: ubuntu-latest
    needs: [conventional-commits, security-audit, file-validation]
    if: always() && !github.event.pull_request.draft
    steps:
      - name: Check compliance status
        run: |
          echo "## üîç Compliance Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.conventional-commits.result }}" == "success" ]]; then
            echo "‚úÖ Conventional Commits: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.conventional-commits.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Conventional Commits: WARNING (non-blocking)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Conventional Commits: SKIPPED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "‚úÖ Security Audit: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Security Audit: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.file-validation.result }}" == "success" ]]; then
            echo "‚úÖ File Validation: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå File Validation: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Overall Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
