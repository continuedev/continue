name: Publish Extension

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            npm_config_arch: x64
          - os: windows-latest
            platform: win32
            arch: arm64
            npm_config_arch: arm
          - os: ubuntu-latest
            platform: linux
            arch: x64
            npm_config_arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            npm_config_arch: arm64
          - os: ubuntu-latest
            platform: linux
            arch: armhf
            npm_config_arch: arm
          - os: ubuntu-latest
            platform: alpine
            arch: x64
            npm_config_arch: x64
          - os: macos-12 # should migrate this to the newer x64 version of macos-14
            platform: darwin
            arch: x64
            npm_config_arch: x64
          - os: macos-12 # same here, especially
            platform: darwin
            arch: arm64
            npm_config_arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      # 1. Check-out repository
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Make sure version isn't odd
        run: |
          cd extensions/vscode
          node scripts/versionCheck.js

      # 2. Install npm dependencies
      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Cache extension node_modules
        uses: actions/cache@v3
        with:
          path: extensions/vscode/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('extensions/vscode/package-lock.json') }}

      - name: Cache core node_modules
        uses: actions/cache@v3
        with:
          path: core/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('core/package-lock.json') }}

      - name: Cache gui node_modules
        uses: actions/cache@v3
        with:
          path: gui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('gui/package-lock.json') }}

      - name: Install extension Dependencies
        run: |
          cd extensions/vscode
          npm ci
        env:
          # https://github.com/microsoft/vscode-ripgrep/issues/9#issuecomment-643965333
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Install gui Dependencies
        run: |
          cd gui
          npm ci

      - name: Install Core Dependencies
        run: |
          cd core
          npm ci

      # 2.25 Run core tests
      - name: Run core tests
        run: |
          cd core
          npm run test
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # 2.5. Pre package
      - name: Set var for environment info
        shell: pwsh
        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV

      - name: Prepackage the extension
        run: |
          cd extensions/vscode
          npm run prepackage -- --target ${{ env.target }}

      # 3. Re-install esbuild (for cases that we force installed for another arch in prepackage.js)
      - name: Re-install esbuild
        run: |
          cd extensions/vscode
          npm install -f esbuild

      # 4. Run tests for the extension
      # - name: Install Xvfb for Linux and run tests
        run: |
          sudo apt-get install -y xvfb # Install Xvfb
          Xvfb :99 & # Start Xvfb
          export DISPLAY=:99 # Export the display number to the environment
          cd extensions/vscode
          npm run test
        if: matrix.os == 'ubuntu-latest'

      - name: Run extension tests
        run: |
          cd extensions/vscode
          npm run test
        if: matrix.os != 'ubuntu-latest'

      # 5. Package the extension
      - name: Package the extension
        run: cd extensions/vscode && npx vsce package --no-dependencies --target ${{ env.target }}

      # 6. Upload the .vsix as an artifact
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.target }}
          path: "extensions/vscode/*.vsix"

  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # Download the .vsix artifacts
      - uses: actions/download-artifact@v3

      - name: Tag the repository
        id: tag
        run: |
          # See https://docs.github.com/en/get-started/using-git/dealing-with-special-characters-in-branch-and-tag-names
          TAG=v$(grep -o '"version": "[^"]*' extensions/vscode/package.json | cut -d'"' -f4)-vscode
          echo "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag -a $TAG -m "Published version $TAG" ${GITHUB_SHA}
          git push origin $TAG

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          files: |
            alpine-x64/*.vsix
            darwin-arm64/*.vsix
            darwin-x64/*.vsix
            linux-arm64/*.vsix
            linux-armhf/*.vsix
            linux-x64/*.vsix
            win32-x64/*.vsix
            win32-arm64/*.vsix
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          repository: continuedev/continue

  publish:
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: write
    steps:
      # 0. Setup git
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Pull latest changes
        run: git pull origin main

      # 1. Download the artifacts
      - uses: actions/download-artifact@v3

      # 2. Publish the extension to VS Code Marketplace
      - name: Publish to VS Code Marketplace
        run: |
          cd extensions/vscode
          npx vsce publish --packagePath ../../alpine-x64/*.vsix ../../darwin-arm64/*.vsix ../../darwin-x64/*.vsix ../../linux-arm64/*.vsix ../../linux-armhf/*.vsix ../../linux-x64/*.vsix ../../win32-x64/*.vsix ../../win32-arm64/*.vsix
        env:
          VSCE_PAT: ${{ secrets.VSCE_TOKEN }}

      # 3. Publish the extension to Open VSX Registry
      - name: Publish (Open VSX Registry)
        continue-on-error: true
        run: |
          cd extensions/vscode
          npx ovsx publish -p ${{ secrets.VSX_REGISTRY_TOKEN }} --packagePath ../../alpine-x64/*.vsix ../../darwin-arm64/*.vsix ../../darwin-x64/*.vsix ../../linux-arm64/*.vsix ../../linux-armhf/*.vsix ../../linux-x64/*.vsix ../../win32-x64/*.vsix ../../win32-arm64/*.vsix

      # 4. Update the package.json version and push changes
      # - name: Update version in package.json
      #   run: |
      #     cd extensions/vscode
      #     npm version patch

      # - name: Commit changes
      #   run: |
      #     git config --local user.email "action@github.com"
      #     git config --local user.name "GitHub Action"
      #     git commit -am "ðŸ’š Update package.json version [skip ci]"

      # - name: Push changes
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: ${{ github.ref }}

      # 5 Send to Discord Webhook
      - name: Discord Commits
        uses: Sniddl/discord-commits@1.7
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          template: "avatar-with-link"
          include-extras: true
