# coding: utf-8

"""
    Continue Hub IDE API

    API for Continue IDE to fetch assistants and other related information. These endpoints are primarily used by the Continue IDE extensions for VS Code and JetBrains. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SyncSecretsRequest(BaseModel):
    """
    SyncSecretsRequest
    """ # noqa: E501
    fqsns: List[Dict[str, Any]] = Field(description="Array of Fully Qualified Secret Names to resolve")
    org_scope_id: Optional[StrictStr] = Field(default=None, description="Organization ID to scope secret resolution to", alias="orgScopeId")
    org_scope_slug: Optional[StrictStr] = Field(default=None, description="Organization slug to scope secret resolution to", alias="orgScopeSlug")
    __properties: ClassVar[List[str]] = ["fqsns", "orgScopeId", "orgScopeSlug"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncSecretsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if org_scope_id (nullable) is None
        # and model_fields_set contains the field
        if self.org_scope_id is None and "org_scope_id" in self.model_fields_set:
            _dict['orgScopeId'] = None

        # set to None if org_scope_slug (nullable) is None
        # and model_fields_set contains the field
        if self.org_scope_slug is None and "org_scope_slug" in self.model_fields_set:
            _dict['orgScopeSlug'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncSecretsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fqsns": obj.get("fqsns"),
            "orgScopeId": obj.get("orgScopeId"),
            "orgScopeSlug": obj.get("orgScopeSlug")
        })
        return _obj


