{
  "title": "SerializedContinueConfig",
  "$ref": "#/definitions/continuedev__core__config__serialized_config__SerializedContinueConfig",
  "definitions": {
    "BaseCompletionOptions": {
      "title": "BaseCompletionOptions",
      "type": "object",
      "properties": {
        "temperature": {
          "title": "Temperature",
          "description": "The temperature of the completion.",
          "type": "number"
        },
        "topP": {
          "title": "Top P",
          "description": "The topP of the completion.",
          "type": "number"
        },
        "topK": {
          "title": "Top K",
          "description": "The topK of the completion.",
          "type": "integer"
        },
        "presencePenalty": {
          "title": "Presence Penalty",
          "description": "The presence penalty Aof the completion.",
          "type": "number"
        },
        "frequencePenalty": {
          "title": "Frequency Penalty",
          "description": "The frequency penalty of the completion.",
          "type": "number"
        },
        "stop": {
          "title": "Stop",
          "description": "The stop tokens of the completion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxTokens": {
          "title": "Max Tokens",
          "description": "The maximum number of tokens to generate.",
          "default": 600,
          "type": "integer"
        }
      }
    },
    "RequestOptions": {
      "title": "RequestOptions",
      "type": "object",
      "properties": {
        "timeout": {
          "title": "Timeout",
          "description": "Set the timeout for each request to the LLM. If you are running a local LLM that takes a while to respond, you might want to set this to avoid timeouts.",
          "default": 300,
          "type": "integer"
        },
        "verifySsl": {
          "title": "Verify Ssl",
          "description": "Whether to verify SSL certificates for requests.",
          "type": "boolean"
        },
        "caBundlePath": {
          "title": "Ca Bundle Path",
          "description": "Path to a custom CA bundle to use when making the HTTP request",
          "type": "string"
        },
        "proxy": {
          "title": "Proxy",
          "description": "Proxy URL to use when making the HTTP request",
          "type": "string"
        },
        "headers": {
          "title": "Headers",
          "description": "Headers to use when making the HTTP request",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ModelDescription": {
      "title": "ModelDescription",
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "description": "The title you wish to give your model.",
          "type": "string"
        },
        "provider": {
          "title": "Provider",
          "description": "The provider of the model. This is used to determine the type of model, and how to interact with it.",
          "enum": [
            "openai",
            "openai-free-trial",
            "anthropic",
            "together",
            "ollama",
            "huggingface-tgi",
            "huggingface-inference-api",
            "llama.cpp",
            "replicate",
            "text-gen-webui",
            "google-palm",
            "lmstudio",
            "llamafile",
            "mistral",
            "sap-gen-ai-hub"
          ],
          "type": "string"
        },
        "model": {
          "title": "Model",
          "description": "The name of the model. Used to autodetect prompt template.",
          "type": "string"
        },
        "apiKey": {
          "title": "Api Key",
          "description": "OpenAI, Anthropic, Together, or other API key",
          "type": "string"
        },
        "apiBase": {
          "title": "Api Base",
          "description": "The base URL of the LLM API.",
          "type": "string"
        },
        "contextLength": {
          "title": "Context Length",
          "description": "The maximum context length of the LLM in tokens, as counted by countTokens.",
          "default": 2048,
          "type": "integer"
        },
        "template": {
          "title": "Template",
          "description": "The chat template used to format messages. This is auto-detected for most models, but can be overridden here. Choose none if you are using vLLM or another server that automatically handles prompting.",
          "enum": [
            "llama2",
            "alpaca",
            "zephyr",
            "phind",
            "anthropic",
            "chatml",
            "none",
            "deepseek",
            "openchat"
          ],
          "type": "string"
        },
        "completionOptions": {
          "title": "Completion Options",
          "description": "Options for the completion endpoint. Read more about the completion options in the documentation.",
          "default": {
            "temperature": null,
            "topP": null,
            "topK": null,
            "presencePenalty": null,
            "frequencyPenalty": null,
            "stop": null,
            "maxTokens": 600
          },
          "allOf": [
            {
              "$ref": "#/definitions/BaseCompletionOptions"
            }
          ]
        },
        "systemMessage": {
          "title": "System Message",
          "description": "A system message that will always be followed by the LLM",
          "type": "string"
        },
        "requestOptions": {
          "title": "Request Options",
          "description": "Options for the HTTP request to the LLM.",
          "default": {
            "timeout": 300,
            "verifySsl": null,
            "caBundlePath": null,
            "proxy": null,
            "headers": null
          },
          "allOf": [
            {
              "$ref": "#/definitions/RequestOptions"
            }
          ]
        },
        "apiType": {
          "title": "Api Type",
          "description": "OpenAI API type, either `openai` or `azure`",
          "enum": ["openai", "azure", "vllm"]
        },
        "apiVersion": {
          "title": "Api Version",
          "description": "Azure OpenAI API version (e.g. 2023-07-01-preview)",
          "type": "string"
        },
        "engine": {
          "title": "Engine",
          "description": "Azure OpenAI engine",
          "type": "string"
        },
        "authURL": {
          "title": "OAuth URL",
          "description": "URL to fetch OAuth token from",
          "type": "string"
        },
        "clientID": {
          "title": "OAuth Client ID",
          "description": "OAuth client ID",
          "type": "string"
        },
        "clientSecret": {
          "title": "OAuth Client Secret",
          "description": "OAuth client secret",
          "type": "string"
        },
        "resourceGroup": {
          "title": "SAP Gen AI Core Resource Group",
          "description": "SAP Gen AI Core resource group",
          "type": "string"
        }
      },
      "required": ["title", "provider", "model"],
      "allOf": [
        {
          "if": {
            "properties": {
              "provider": {
                "type": "str"
              }
            },
            "not": {
              "required": ["provider"]
            }
          },
          "then": {
            "properties": {
              "model": {
                "description": "Choose a provider first, then model options will be shown here."
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "openai",
                  "anthropic",
                  "google-palm",
                  "huggingface-inference-api",
                  "replicate",
                  "together"
                ]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "required": ["apiKey"]
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["huggingface-tgi"]
              }
            }
          },
          "then": {
            "required": ["apiBase"]
          },
          "required": ["provider"]
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["openai"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "engine": {
                "type": "string"
              },
              "apiType": {
                "type": "string"
              },
              "apiVersion": {
                "type": "string"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["openai"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "apiType": {
                "enum": [
                  "openai",
                  "azure"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["openai"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "model": {
                "enum": [
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-16k",
                  "gpt-4",
                  "gpt-3.5-turbo-0613",
                  "gpt-4-32k",
                  "gpt-4-1106-preview"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["replicate"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "llama2-7b",
                      "llama2-13b"
                    ]
                  },
                  { "type": "string" }
                ]
              },
              "description": "Select a pre-defined option, or find an exact model ID from Replicate [here](https://replicate.com/collections/streaming-language-models)."
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["openai-free-trial"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "model": {
                "enum": ["gpt-3.5-turbo", "gpt-4"]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["openai"]
              },
              "apiType": {
                "not": {
                  "const": "azure"
                }
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "gpt-3.5-turbo",
                      "gpt-3.5-turbo-16k",
                      "gpt-4",
                      "gpt-3.5-turbo-0613",
                      "gpt-4-32k",
                      "gpt-4-1106-preview",
                      "mistral-7b",
                      "mistral-8x7b",
                      "llama2-7b",
                      "llama2-13b",
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "phind-codellama-34b",
                      "wizardcoder-7b",
                      "wizardcoder-13b",
                      "wizardcoder-34b",
                      "zephyr-7b",
                      "codeup-13b",
                      "deepseek-1b",
                      "deepseek-7b",
                      "deepseek-33b"
                    ]
                  },
                  { "type": "string" }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["anthropic"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  { "enum": ["claude-2", "claude-instant-1"] },
                  { "type": "string" }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["google-palm"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "model": {
                "enum": ["chat-bison-001", "gemini-pro"]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["together"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "mistral-7b",
                      "mistral-8x7b",
                      "llama2-7b",
                      "llama2-13b",
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "phind-codellama-34b"
                    ]
                  },
                  { "type": "string" }
                ],
                "description": "Select a pre-defined option, or find an exact model string from Together AI [here](https://docs.together.ai/docs/inference-models)."
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "huggingface-tgi",
                  "huggingface-inference-api",
                  "llama.cpp",
                  "text-gen-webui",
                  "llamafile"
                ]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "mistral-7b",
                      "mistral-8x7b",
                      "llama2-7b",
                      "llama2-13b",
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "phind-codellama-34b",
                      "wizardcoder-7b",
                      "wizardcoder-13b",
                      "wizardcoder-34b",
                      "zephyr-7b",
                      "codeup-13b",
                      "deepseek-1b",
                      "deepseek-7b",
                      "deepseek-33b"
                    ]
                  },
                  { "type": "string" }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["ollama"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "model": {
                "anyOf": [
                  {
                    "enum": [
                      "mistral-7b",
                      "llama2-7b",
                      "llama2-13b",
                      "codellama-7b",
                      "codellama-13b",
                      "codellama-34b",
                      "phind-codellama-34b",
                      "wizardcoder-7b",
                      "wizardcoder-13b",
                      "wizardcoder-34b",
                      "zephyr-7b",
                      "codeup-13b",
                      "deepseek-1b",
                      "deepseek-7b",
                      "deepseek-33b"
                    ]
                  },
                  { "type": "string" }
                ],
                "description": "Select a pre-defined option, or find the exact model tag for an Ollama model [here](https://ollama.ai/library)."
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["mistral"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "model": {
                "enum": ["mistral-tiny", "mistral-small", "mistral-medium"]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "apiType": {
                "const": "azure"
              }
            },
            "required": ["apiType"]
          },
          "then": {
            "required": ["engine", "apiVersion", "apiBase"]
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["openai"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "useLegacyCompletionsEndpoint": {
                "type": "boolean"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "const": "llamafile"
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "llamafileCommand": {
                "type": "string"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["text-gen-webui"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "streamingUrl": {
                "type": "string"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": [
                  "sap-gen-ai-hub"
                ]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "required": ["clientID", "clientSecret", "authURL", "resourceGroup", "apiBase"]
          }
        },
        {
          "if": {
            "properties": {
              "provider": {
                "enum": ["sap-gen-ai-hub"]
              }
            },
            "required": ["provider"]
          },
          "then": {
            "properties": {
              "apiType": {
                "enum": [
                  "azure",
                  "vllm"
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "apiType": {
                "const": "vllm"
              }
            },
            "required": ["apiType"]
          },
          "then": {
            "required": ["apiVersion", "apiBase"]
          }
        }
      ]
    },
    "ModelRoles": {
      "title": "ModelRoles",
      "type": "object",
      "properties": {
        "default": {
          "title": "Default",
          "description": "The default model. If other model roles are not set, they will fall back to default.",
          "type": "string"
        },
        "chat": {
          "title": "Chat",
          "description": "The model to use for chat. If not set, will fall back to default.",
          "type": "string"
        },
        "edit": {
          "title": "Edit",
          "description": "The model to use for editing. If not set, will fall back to default.",
          "type": "string"
        },
        "summarize": {
          "title": "Summarize",
          "description": "The model to use for summarization. If not set, will fall back to default.",
          "type": "string"
        }
      },
      "required": ["default"]
    },
    "SlashCommand": {
      "title": "SlashCommand",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string"
        },
        "step": {
          "title": "Step",
          "enum": [
            "AnswerQuestionChroma",
            "GenerateShellCommandStep",
            "EditHighlightedCodeStep",
            "ShareSessionStep",
            "CommentCodeStep",
            "ClearHistoryStep",
            "StackOverflowStep",
            "OpenConfigStep",
            "DraftIssueStep",
            "HttpSlashCommand",
            "CommitMessageStep"
          ],
          "type": "string"
        },
        "params": {
          "title": "Params",
          "default": {},
          "type": "object"
        }
      },
      "required": ["name", "description", "step"]
    },
    "CustomCommand": {
      "title": "CustomCommand",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "prompt": {
          "title": "Prompt",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string"
        }
      },
      "required": ["name", "prompt", "description"]
    },
    "ContextProviderWithParams": {
      "title": "ContextProviderWithParams",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "enum": [
            "diff",
            "github",
            "terminal",
            "open",
            "google",
            "search",
            "url",
            "http"
          ],
          "type": "string"
        },
        "params": {
          "title": "Params",
          "default": {},
          "type": "object"
        }
      },
      "required": ["name"]
    },
    "RetrievalSettings": {
      "title": "RetrievalSettings",
      "type": "object",
      "properties": {
        "nRetrieve": {
          "title": "N Retrieve",
          "description": "Number of results to initially retrieve from vector database",
          "default": 50,
          "type": "integer"
        },
        "nFinal": {
          "title": "N Final",
          "description": "Final number of results to use after re-ranking",
          "default": 10,
          "type": "integer"
        },
        "useReranking": {
          "title": "Use Reranking",
          "description": "Whether to use re-ranking, which will allow initial selection of nRetrieve results, then will use an LLM to select the top nFinal results",
          "default": true,
          "type": "boolean"
        },
        "rerankGroupSize": {
          "title": "Rerank Group Size",
          "description": "Number of results to group together when re-ranking. Each group will be processed in parallel.",
          "default": 5,
          "type": "integer"
        },
        "ignoreFiles": {
          "title": "Ignore Files",
          "description": "Files to ignore when indexing the codebase. You can use glob patterns, such as **/*.py. This is useful for directories that contain generated code, or other directories that are not relevant to the codebase.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "openaiApiKey": {
          "title": "Openai Api Key",
          "description": "OpenAI API key",
          "type": "string"
        },
        "apiBase": {
          "title": "Api Base",
          "description": "OpenAI API base URL",
          "type": "string"
        },
        "apiType": {
          "title": "Api Type",
          "description": "OpenAI API type",
          "type": "string"
        },
        "apiVersion": {
          "title": "Api Version",
          "description": "OpenAI API version",
          "type": "string"
        },
        "organizationId": {
          "title": "Organization Id",
          "description": "OpenAI organization ID",
          "type": "string"
        }
      }
    },
    "continuedev__core__config__serialized_config__SerializedContinueConfig": {
      "title": "SerializedContinueConfig",
      "type": "object",
      "properties": {
        "disallowedSteps": {
          "title": "Disallowed Steps",
          "description": "Steps that are not allowed to be run, and will be skipped if attempted",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowAnonymousTelemetry": {
          "title": "Allow Anonymous Telemetry",
          "description": "If this field is set to True, we will collect anonymous telemetry as described in the documentation page on telemetry. If set to False, we will not collect any data.",
          "default": true,
          "type": "boolean"
        },
        "models": {
          "title": "Models",
          "default": [
            {
              "title": "GPT-4 (trial)",
              "provider": "openai-free-trial",
              "model": "gpt-4",
              "apiKey": ""
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelDescription"
          }
        },
        "modelRoles": {
          "title": "Model Roles",
          "description": "Roles for models. Each entry should be the title of a model in the models array.",
          "default": {
            "default": "GPT-4 (trial)",
            "chat": null,
            "edit": null,
            "summarize": null
          },
          "allOf": [
            {
              "$ref": "#/definitions/ModelRoles"
            }
          ]
        },
        "systemMessage": {
          "title": "System Message",
          "description": "A system message that will always be followed by the LLM",
          "type": "string"
        },
        "completionOptions": {
          "title": "Completion Options",
          "description": "Default options for completion. These will be overriden by any options set for a specific model.",
          "default": {
            "temperature": null,
            "topP": null,
            "topK": null,
            "presencePenalty": null,
            "frequencyPenalty": null,
            "stop": null,
            "maxTokens": 600
          },
          "allOf": [
            {
              "$ref": "#/definitions/BaseCompletionOptions"
            }
          ]
        },
        "slashCommands": {
          "title": "Slash Commands",
          "description": "An array of slash commands that let you map custom Steps to a shortcut.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlashCommand"
          }
        },
        "customCommands": {
          "title": "Custom Commands",
          "description": "An array of custom commands that allow you to reuse prompts. Each has name, description, and prompt properties. When you enter /<name> in the text input, it will act as a shortcut to the prompt.",
          "default": [
            {
              "name": "test",
              "prompt": "Write a comprehensive set of unit tests for the selected code. It should setup, run tests that check for correctness including important edge cases, and teardown. Ensure that the tests are complete and sophisticated. Give the tests just as chat output, don't edit any file.",
              "description": "This is an example custom command. Use /config to edit it and create more"
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomCommand"
          }
        },
        "contextProviders": {
          "title": "Context Providers",
          "description": "A list of ContextProvider objects that can be used to provide context to the LLM by typing '@'. Read more about ContextProviders in the documentation.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContextProviderWithParams"
          }
        },
        "userToken": {
          "title": "User Token",
          "description": "An optional token to identify the user.",
          "type": "string"
        },
        "dataServerUrl": {
          "title": "Data Server Url",
          "description": "The URL of the server where development data is sent. No data is sent unless a valid user token is provided.",
          "default": "https://us-west1-autodebug.cloudfunctions.net",
          "type": "string"
        },
        "disableSummaries": {
          "title": "Disable Summaries",
          "description": "If set to `True`, Continue will not generate summaries for each Step. This can be useful if you want to save on compute.",
          "default": false,
          "type": "boolean"
        },
        "disableIndexing": {
          "title": "Disable Indexing",
          "description": "If set to `True`, Continue will not index the codebase. This is mainly used for debugging purposes.",
          "default": false,
          "type": "boolean"
        },
        "retrievalSettings": {
          "title": "Retrieval Settings",
          "description": "Settings for the retrieval system. Read more about the retrieval system in the documentation.",
          "default": {
            "nRetrieve": 50,
            "nFinal": 10,
            "useReranking": true,
            "rerankGroupSize": 5,
            "ignoreFiles": [],
            "openaiApiKey": null,
            "apiBase": null,
            "apiType": null,
            "apiVersion": null,
            "organizationId": null
          },
          "allOf": [
            {
              "$ref": "#/definitions/RetrievalSettings"
            }
          ]
        }
      }
    }
  }
}
