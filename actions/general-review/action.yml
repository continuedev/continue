name: "Continue PR Review"
description: "Automated code review for pull requests using Continue CLI"
author: "Continue Dev, Inc."

inputs:
  continue-api-key:
    description: "API key for Continue service"
    required: true
  continue-org:
    description: "Organization for Continue config"
    required: true
  continue-config:
    description: 'Config path to use (e.g., "myorg/review-bot")'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Check Authorization
      shell: bash
      env:
        # Only move the dangerous check to env to prevent shell injection
        HAS_TRIGGER_PHRASE: ${{ contains(github.event.comment.body, '@continue-review') }}
      run: |
        # Check if this action should run based on event type and user permissions
        SHOULD_RUN="false"

        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Check if PR is a draft
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "::notice::Skipping review - PR is a draft"
          else
            # Check PR author association
            AUTHOR_ASSOC="${{ github.event.pull_request.author_association }}"
            if [ "$AUTHOR_ASSOC" = "OWNER" ] || [ "$AUTHOR_ASSOC" = "MEMBER" ] || [ "$AUTHOR_ASSOC" = "COLLABORATOR" ]; then
              SHOULD_RUN="true"
            else
              echo "::notice::Skipping review - PR author is not a team member (association: $AUTHOR_ASSOC)"
            fi
          fi
        elif [ "${{ github.event_name }}" = "issue_comment" ]; then
          # Check if it's a PR comment with the trigger phrase
          if [ "${{ github.event.issue.pull_request }}" != "" ] && [ "$HAS_TRIGGER_PHRASE" = "true" ]; then
            COMMENTER_ASSOC="${{ github.event.comment.author_association }}"
            if [ "$COMMENTER_ASSOC" = "OWNER" ] || [ "$COMMENTER_ASSOC" = "MEMBER" ] || [ "$COMMENTER_ASSOC" = "COLLABORATOR" ]; then
              SHOULD_RUN="true"
            else
              echo "::notice::Skipping review - Commenter is not a team member (association: $COMMENTER_ASSOC)"
            fi
          else
            echo "::notice::Skipping review - Comment does not contain @continue-review trigger, or is not on a PR"
          fi
        else
          echo "::notice::Skipping review - Unsupported event type: ${{ github.event_name }}"
        fi

        echo "SHOULD_RUN=$SHOULD_RUN" >> $GITHUB_ENV

    - name: Setup Node.js
      if: env.SHOULD_RUN == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Continue CLI
      if: env.SHOULD_RUN == 'true'
      shell: bash
      run: npm install -g @continuedev/cli@1.4.30

    - name: Post Initial Comment
      if: env.SHOULD_RUN == 'true'
      id: initial-comment
      uses: actions/github-script@v7
      with:
        script: |
          const marker = '<!-- continue-agent-review -->';

          // Get PR number based on event type
          let prNumber;
          if (context.eventName === 'pull_request') {
            prNumber = context.payload.pull_request.number;
          } else {
            // For issue_comment event
            prNumber = context.payload.issue.number;
          }

          // Check for existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            per_page: 100
          });

          // Find existing Continue review comment
          const existingComment = comments
            .filter(c => c.body && c.body.includes(marker))
            .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];

          // Get workflow run URL
          const workflowRunUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

          // Create initial "review in progress" message
          let initialMessage = `${marker}\n**üîÑ Review In Progress**\n\n`;

          if (context.eventName === 'issue_comment') {
            initialMessage = `${marker}\n**üîÑ Review In Progress**\n\n*Triggered by @${context.payload.comment.user.login}'s request*\n\n`;
          }

          initialMessage += `Continue AI is analyzing the code changes...\n\n`;
          initialMessage += `üìä **Review Scope:**\n`;
          initialMessage += `- Repository: ${context.repo.owner}/${context.repo.repo}\n`;
          initialMessage += `- PR #${prNumber}\n\n`;
          initialMessage += `‚è±Ô∏è This typically takes 1-2 minutes.\n\n`;
          initialMessage += `[View live progress ‚Üí](${workflowRunUrl})\n\n`;
          initialMessage += `---\n<!-- ${new Date().toISOString()} | Powered by Continue (https://continue.dev) -->`;

          if (existingComment) {
            // Check if comment is less than 1 hour old
            const commentAge = Date.now() - new Date(existingComment.created_at).getTime();
            const oneHour = 60 * 60 * 1000;

            if (commentAge < oneHour) {
              // Update existing comment if less than 1 hour old
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: initialMessage
              });
              console.log(`Updated existing comment ${existingComment.id} to show review in progress`);
              core.setOutput('comment_id', existingComment.id);
            } else {
              // Create new comment if older than 1 hour (preserve history)
              const { data: comment } = await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: initialMessage
              });
              console.log(`Created new comment ${comment.id} showing review in progress`);
              core.setOutput('comment_id', comment.id);
            }
          } else {
            // Create new comment
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: initialMessage
            });
            console.log(`Created new comment ${comment.id} on PR #${prNumber}`);
            core.setOutput('comment_id', comment.id);
          }

    - name: Build PR Review Prompt
      if: env.SHOULD_RUN == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        # Get PR number based on event type
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_NUMBER="${{ github.event.number }}"
        else
          # For issue_comment event on a PR
          PR_NUMBER="${{ github.event.issue.number }}"
        fi

        # Gather PR context and build prompt without heredocs
        gh pr diff "$PR_NUMBER" > pr_diff.txt
        gh pr view "$PR_NUMBER" --json title,author,body,files > pr_data.json
        node actions/general-review/scripts/buildPrompt.js "$PR_NUMBER"
        rm -f pr_data.json

    - name: Run Continue CLI Review
      if: env.SHOULD_RUN == 'true'
      shell: bash
      env:
        CONTINUE_API_KEY: ${{ inputs.continue-api-key }}
        CONTINUE_ORG: ${{ inputs.continue-org }}
        CONTINUE_CONFIG: ${{ inputs.continue-config }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "Running Continue CLI with prompt:"
        echo "=================================="
        head -n 100 review_prompt.txt
        echo "... [truncated] ..."
        echo "=================================="
        echo ""

        # Validate API key
        if [ -z "$CONTINUE_API_KEY" ]; then
          echo "Warning: CONTINUE_API_KEY environment variable is not set"
          # Create fallback review and continue
          node actions/general-review/scripts/writeMarkdown.js code_review.md missing_api_key
          echo "SKIP_CLI=true" >> $GITHUB_ENV
        else
          echo "SKIP_CLI=false" >> $GITHUB_ENV
        fi

        # Validate inputs to prevent command injection
        if [[ ! "$CONTINUE_ORG" =~ ^[a-zA-Z0-9_-]+$ ]]; then
          echo "Error: Invalid organization name. Must contain only alphanumeric characters, hyphens, and underscores."
          exit 1
        fi

        if [[ ! "$CONTINUE_CONFIG" =~ ^[a-zA-Z0-9_/-]+$ ]]; then
          echo "Error: Invalid config path. Must contain only alphanumeric characters, hyphens, underscores, and forward slashes."
          exit 1
        fi

        # Test Continue CLI availability
        if [ "$SKIP_CLI" != "true" ]; then
          echo "Testing Continue CLI..."
          if ! which cn > /dev/null 2>&1; then
            echo "Warning: Continue CLI not found or not working"
            node actions/general-review/scripts/writeMarkdown.js code_review.md cli_install_failed
            echo "SKIP_CLI=true" >> $GITHUB_ENV
          else
            echo "Continue CLI found at: $(which cn)"
            echo "Continue CLI version: $(cn --version 2>/dev/null || echo 'version check failed')"
          fi
        fi

        # Run the CLI with validated config and error handling
        if [ "$SKIP_CLI" != "true" ]; then
          echo "Executing Continue CLI with config: $CONTINUE_ORG/$CONTINUE_CONFIG"
          
          # Write prompt to temp file for headless mode
          PROMPT_FILE="/tmp/continue-review-$RANDOM.txt"
          cp review_prompt.txt "$PROMPT_FILE"
          echo "Prompt file: $PROMPT_FILE"
          echo "Prompt length: $(wc -c < "$PROMPT_FILE") characters"
          
          # Use timeout to prevent hanging (360 seconds = 6 minutes)
          echo "Executing command: cn --config $CONTINUE_ORG/$CONTINUE_CONFIG -p @$PROMPT_FILE --allow Bash"
          
          if timeout 360 cn --config "$CONTINUE_ORG/$CONTINUE_CONFIG" -p "@$PROMPT_FILE" --allow Bash > code_review_raw.md 2>cli_error.log; then
            echo "Continue CLI completed successfully"
            echo "Raw output length: $(wc -c < code_review_raw.md) characters"
            
            # Clean up ANSI codes if any
            sed 's/\x1b\[[0-9;]*m//g' code_review_raw.md > code_review.md
            
            echo "Cleaned output length: $(wc -c < code_review.md) characters"
            echo "First 500 chars of output:"
            head -c 500 code_review.md
            echo ""
            
            # Check if output is empty
            if [ ! -s code_review.md ]; then
              echo "Warning: Continue CLI returned empty output"
              node actions/general-review/scripts/writeMarkdown.js code_review.md empty_output
            fi
          else
            echo "Error: Continue CLI command failed with exit code $?"
            echo "CLI error log:"
            cat cli_error.log
            
            # Check for specific error patterns
            if grep -q "not found\|ENOENT" cli_error.log 2>/dev/null; then
              node actions/general-review/scripts/writeMarkdown.js code_review.md cli_not_found
            elif grep -q "config\|assistant" cli_error.log 2>/dev/null; then
              node actions/general-review/scripts/writeMarkdown.js code_review.md config_error
            elif grep -q "api\|auth" cli_error.log 2>/dev/null; then
              node actions/general-review/scripts/writeMarkdown.js code_review.md auth_error
            else
              node actions/general-review/scripts/writeMarkdown.js code_review.md generic_failure
            fi
          fi
          
          # Clean up temp file
          rm -f "$PROMPT_FILE"
        else
          echo "Review generation successfully completed"
        fi

    - name: Upload Review Results
      if: env.SHOULD_RUN == 'true' && always()
      uses: actions/upload-artifact@v4
      with:
        name: code-review-results
        path: |
          code_review.md
          review_prompt.txt
          pr_diff.txt
        retention-days: 30

    - name: Update Comment with Review
      if: env.SHOULD_RUN == 'true' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            let reviewContent = '';

            if (fs.existsSync('code_review.md') && fs.statSync('code_review.md').size > 0) {
              reviewContent = fs.readFileSync('code_review.md', 'utf8');
            } else {
              // Build direct link to workflow logs
              const workflowRunUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              reviewContent = `‚ö†Ô∏è AI review completed but no review output was generated.\n\n**Likely cause:** Expired CONTINUE_API_KEY or missing continuedev/review-bot assistant\n\n[üìã View workflow logs](${workflowRunUrl}) for details.`;
            }

            // Get PR number based on event type
            let prNumber;
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else {
              // For issue_comment event
              prNumber = context.payload.issue.number;
            }

            // Add a header if triggered by comment
            if (context.eventName === 'issue_comment') {
              reviewContent = `*Triggered by @${context.payload.comment.user.login}'s request*\n\n${reviewContent}`;
            }

            // Add footer with timestamp and branding
            const timestamp = new Date().toISOString();
            reviewContent += `\n\n---\n<!-- ${timestamp} | Powered by Continue (https://continue.dev) -->`;

            // Look for existing review comment to update (sticky comment)
            const marker = '<!-- continue-agent-review -->';

            // Try to get comment_id from the initial comment step
            const initialCommentId = '${{ steps.initial-comment.outputs.comment_id }}';

            if (initialCommentId && initialCommentId !== '') {
              // We have the comment ID from the initial step, use it directly
              reviewContent = `${marker}\n**‚úÖ Review Complete**\n\n${reviewContent}`;

              try {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: parseInt(initialCommentId),
                  body: reviewContent
                });
                console.log(`Updated comment ${initialCommentId} with review results`);
              } catch (updateError) {
                console.log(`Failed to update comment ${initialCommentId}, will search for it instead:`, updateError.message);

                // Fallback: search for the comment
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  per_page: 100
                });

                // Find existing Continue review comment
                const existingComment = comments
                  .filter(c => c.body && c.body.includes(marker))
                  .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];

                if (existingComment) {
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: existingComment.id,
                    body: reviewContent
                  });
                  console.log(`Updated existing comment ${existingComment.id} via search`);
                } else {
                  // Create new comment as last resort
                  await github.rest.issues.createComment({
                    issue_number: prNumber,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: reviewContent
                  });
                  console.log(`Created new comment on PR #${prNumber} as fallback`);
                }
              }
            } else {
              // No initial comment ID, search for existing comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                per_page: 100
              });

              // Find existing Continue review comment
              const existingComment = comments
                .filter(c => c.body && c.body.includes(marker))
                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];

              // Add marker and review status
              reviewContent = `${marker}\n**‚úÖ Review Complete**\n\n${reviewContent}`;

              if (existingComment) {
                // Check if comment is less than 1 hour old
                const commentAge = Date.now() - new Date(existingComment.created_at).getTime();
                const oneHour = 60 * 60 * 1000;

                if (commentAge < oneHour) {
                  // Update existing comment if less than 1 hour old
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: existingComment.id,
                    body: reviewContent
                  });
                  console.log(`Updated existing comment ${existingComment.id} (${Math.round(commentAge / 1000 / 60)} minutes old)`);
                } else {
                  // Create new comment if older than 1 hour (preserve history)
                  await github.rest.issues.createComment({
                    issue_number: prNumber,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: reviewContent
                  });
                  console.log(`Created new comment (existing comment was ${Math.round(commentAge / 1000 / 60)} minutes old)`);
                }
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: reviewContent
                });
                console.log(`Created new comment on PR #${prNumber}`);
              }
            }
          } catch (error) {
            console.log('Failed to post comment:', error.message);
            console.log('Error details:', error);
          }

branding:
  icon: "code"
  color: "blue"
