const fs = require('fs').promises;
const path = require('path');

async function combineMarkdownFiles(sourceDir, outputFile) {
    try {
        console.log(`Reading directory: ${sourceDir}`);
        const files = await fs.readdir(sourceDir);
        console.log(`Found ${files.length} files`);

        const markdownFiles = files
            .filter(file => file.endsWith('.md'))
            .sort();
        console.log(`Found ${markdownFiles.length} Markdown files`);

        const pageMeta = `---
id: llm-providers
title: LLM Providers
sidebar_label: ðŸ¤– LLM Providers
toc_max_heading_level: 2
description: Overview of the various LLM providers supported by Continue
keywords: [LLM, language models, AI, machine learning, natural language processing]
---
`;

        const autoGeneratedWarning = `
<!-- 
WARNING: This file is auto-generated. Any manual changes to this file will be overwritten.
-->
`;

        let combinedContent = pageMeta + autoGeneratedWarning;

        for (const file of markdownFiles) {
            console.log(`Processing file: ${file}`);
            const filePath = path.join(sourceDir, file);
            let content = await fs.readFile(filePath, 'utf8');

            // Add one '#' to each heading
            content = content.replace(/^(#+)\s/gm, '#$1 ');

            combinedContent += `\n\n${content}`;
        }

        console.log(`Writing combined content to: ${outputFile}`);
        await fs.writeFile(outputFile, combinedContent.trim());
        console.log(`Combined Markdown file generated: ${outputFile}`);
    } catch (error) {
        console.error('Error combining Markdown files:', error);
    }
}

const sourceDirectory = './llm-providers';
const outputFile = './docs/reference/llm-providers.md';

combineMarkdownFiles(sourceDirectory, outputFile);
